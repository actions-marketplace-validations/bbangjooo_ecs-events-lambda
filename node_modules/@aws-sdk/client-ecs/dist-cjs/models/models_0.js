"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PidMode = exports.NetworkMode = exports.IpcMode = exports.UlimitName = exports.ResourceType = exports.TransportProtocol = exports.LogDriver = exports.DeviceCgroupPermission = exports.FirelensConfigurationType = exports.EnvironmentFileType = exports.ContainerCondition = exports.Compatibility = exports.InstanceHealthCheckType = exports.InstanceHealthCheckState = exports.TaskSetNotFoundException = exports.ClusterContainsTasksException = exports.ClusterContainsServicesException = exports.ClusterContainsContainerInstancesException = exports.TargetNotFoundException = exports.TargetType = exports.SettingName = exports.ServiceNotFoundException = exports.ServiceNotActiveException = exports.UnsupportedFeatureException = exports.PlatformUnknownException = exports.PlatformTaskDefinitionIncompatibilityException = exports.StabilityStatus = exports.ScaleUnit = exports.DeploymentRolloutState = exports.SchedulingStrategy = exports.PropagateTags = exports.PlacementStrategyType = exports.PlacementConstraintType = exports.AssignPublicIp = exports.LaunchType = exports.DeploymentControllerType = exports.ClusterNotFoundException = exports.ClusterSettingName = exports.ExecuteCommandLogging = exports.UpdateInProgressException = exports.ServerException = exports.LimitExceededException = exports.InvalidParameterException = exports.CapacityProviderUpdateStatus = exports.CapacityProviderStatus = exports.ManagedTerminationProtection = exports.ManagedScalingStatus = exports.ClientException = exports.AgentUpdateStatus = exports.AccessDeniedException = void 0;
exports.DeploymentControllerFilterSensitiveLog = exports.DeploymentConfigurationFilterSensitiveLog = exports.DeploymentCircuitBreakerFilterSensitiveLog = exports.CreateClusterResponseFilterSensitiveLog = exports.ClusterFilterSensitiveLog = exports.AttachmentFilterSensitiveLog = exports.KeyValuePairFilterSensitiveLog = exports.CreateClusterRequestFilterSensitiveLog = exports.ClusterSettingFilterSensitiveLog = exports.CapacityProviderStrategyItemFilterSensitiveLog = exports.ClusterConfigurationFilterSensitiveLog = exports.ExecuteCommandConfigurationFilterSensitiveLog = exports.ExecuteCommandLogConfigurationFilterSensitiveLog = exports.CreateCapacityProviderResponseFilterSensitiveLog = exports.CapacityProviderFilterSensitiveLog = exports.CreateCapacityProviderRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.AutoScalingGroupProviderFilterSensitiveLog = exports.ManagedScalingFilterSensitiveLog = exports.NoUpdateAvailableException = exports.MissingVersionException = exports.ResourceNotFoundException = exports.BlockedException = exports.PlatformDeviceType = exports.ResourceInUseException = exports.AttributeLimitExceededException = exports.DesiredStatus = exports.SortOrder = exports.TaskDefinitionFamilyStatus = exports.ContainerInstanceStatus = exports.TargetNotConnectedException = exports.TaskSetField = exports.TaskStopCode = exports.ManagedAgentName = exports.HealthStatus = exports.Connectivity = exports.TaskField = exports.TaskDefinitionField = exports.ServiceField = exports.ContainerInstanceField = exports.ClusterField = exports.CapacityProviderField = exports.EFSTransitEncryption = exports.EFSAuthorizationConfigIAM = exports.Scope = exports.TaskDefinitionStatus = exports.OSFamily = exports.CPUArchitecture = exports.ProxyConfigurationType = exports.TaskDefinitionPlacementConstraintType = void 0;
exports.PortMappingFilterSensitiveLog = exports.MountPointFilterSensitiveLog = exports.LogConfigurationFilterSensitiveLog = exports.SecretFilterSensitiveLog = exports.LinuxParametersFilterSensitiveLog = exports.TmpfsFilterSensitiveLog = exports.DeviceFilterSensitiveLog = exports.KernelCapabilitiesFilterSensitiveLog = exports.HealthCheckFilterSensitiveLog = exports.FirelensConfigurationFilterSensitiveLog = exports.HostEntryFilterSensitiveLog = exports.EnvironmentFileFilterSensitiveLog = exports.ContainerDependencyFilterSensitiveLog = exports.DeregisterTaskDefinitionRequestFilterSensitiveLog = exports.DeregisterContainerInstanceResponseFilterSensitiveLog = exports.ContainerInstanceFilterSensitiveLog = exports.VersionInfoFilterSensitiveLog = exports.ResourceFilterSensitiveLog = exports.ContainerInstanceHealthStatusFilterSensitiveLog = exports.InstanceHealthCheckResultFilterSensitiveLog = exports.DeregisterContainerInstanceRequestFilterSensitiveLog = exports.DeleteTaskSetResponseFilterSensitiveLog = exports.DeleteTaskSetRequestFilterSensitiveLog = exports.DeleteServiceResponseFilterSensitiveLog = exports.DeleteServiceRequestFilterSensitiveLog = exports.DeleteClusterResponseFilterSensitiveLog = exports.DeleteClusterRequestFilterSensitiveLog = exports.DeleteCapacityProviderResponseFilterSensitiveLog = exports.DeleteCapacityProviderRequestFilterSensitiveLog = exports.DeleteAttributesResponseFilterSensitiveLog = exports.DeleteAttributesRequestFilterSensitiveLog = exports.AttributeFilterSensitiveLog = exports.DeleteAccountSettingResponseFilterSensitiveLog = exports.SettingFilterSensitiveLog = exports.DeleteAccountSettingRequestFilterSensitiveLog = exports.CreateTaskSetResponseFilterSensitiveLog = exports.CreateTaskSetRequestFilterSensitiveLog = exports.CreateServiceResponseFilterSensitiveLog = exports.ServiceFilterSensitiveLog = exports.TaskSetFilterSensitiveLog = exports.ScaleFilterSensitiveLog = exports.ServiceEventFilterSensitiveLog = exports.DeploymentFilterSensitiveLog = exports.CreateServiceRequestFilterSensitiveLog = exports.ServiceRegistryFilterSensitiveLog = exports.PlacementStrategyFilterSensitiveLog = exports.PlacementConstraintFilterSensitiveLog = exports.NetworkConfigurationFilterSensitiveLog = exports.AwsVpcConfigurationFilterSensitiveLog = exports.LoadBalancerFilterSensitiveLog = void 0;
exports.ListAccountSettingsResponseFilterSensitiveLog = exports.ListAccountSettingsRequestFilterSensitiveLog = exports.ExecuteCommandResponseFilterSensitiveLog = exports.SessionFilterSensitiveLog = exports.ExecuteCommandRequestFilterSensitiveLog = exports.DiscoverPollEndpointResponseFilterSensitiveLog = exports.DiscoverPollEndpointRequestFilterSensitiveLog = exports.DescribeTaskSetsResponseFilterSensitiveLog = exports.DescribeTaskSetsRequestFilterSensitiveLog = exports.DescribeTasksResponseFilterSensitiveLog = exports.TaskFilterSensitiveLog = exports.TaskOverrideFilterSensitiveLog = exports.InferenceAcceleratorOverrideFilterSensitiveLog = exports.ContainerOverrideFilterSensitiveLog = exports.ContainerFilterSensitiveLog = exports.NetworkInterfaceFilterSensitiveLog = exports.NetworkBindingFilterSensitiveLog = exports.ManagedAgentFilterSensitiveLog = exports.DescribeTasksRequestFilterSensitiveLog = exports.DescribeTaskDefinitionResponseFilterSensitiveLog = exports.DescribeTaskDefinitionRequestFilterSensitiveLog = exports.DescribeServicesResponseFilterSensitiveLog = exports.DescribeServicesRequestFilterSensitiveLog = exports.DescribeContainerInstancesResponseFilterSensitiveLog = exports.DescribeContainerInstancesRequestFilterSensitiveLog = exports.DescribeClustersResponseFilterSensitiveLog = exports.DescribeClustersRequestFilterSensitiveLog = exports.DescribeCapacityProvidersResponseFilterSensitiveLog = exports.FailureFilterSensitiveLog = exports.DescribeCapacityProvidersRequestFilterSensitiveLog = exports.DeregisterTaskDefinitionResponseFilterSensitiveLog = exports.TaskDefinitionFilterSensitiveLog = exports.VolumeFilterSensitiveLog = exports.HostVolumePropertiesFilterSensitiveLog = exports.FSxWindowsFileServerVolumeConfigurationFilterSensitiveLog = exports.FSxWindowsFileServerAuthorizationConfigFilterSensitiveLog = exports.EFSVolumeConfigurationFilterSensitiveLog = exports.EFSAuthorizationConfigFilterSensitiveLog = exports.DockerVolumeConfigurationFilterSensitiveLog = exports.RuntimePlatformFilterSensitiveLog = exports.ProxyConfigurationFilterSensitiveLog = exports.TaskDefinitionPlacementConstraintFilterSensitiveLog = exports.InferenceAcceleratorFilterSensitiveLog = exports.EphemeralStorageFilterSensitiveLog = exports.ContainerDefinitionFilterSensitiveLog = exports.VolumeFromFilterSensitiveLog = exports.UlimitFilterSensitiveLog = exports.SystemControlFilterSensitiveLog = exports.ResourceRequirementFilterSensitiveLog = exports.RepositoryCredentialsFilterSensitiveLog = void 0;
exports.UpdateCapacityProviderRequestFilterSensitiveLog = exports.AutoScalingGroupProviderUpdateFilterSensitiveLog = exports.UntagResourceResponseFilterSensitiveLog = exports.UntagResourceRequestFilterSensitiveLog = exports.TagResourceResponseFilterSensitiveLog = exports.TagResourceRequestFilterSensitiveLog = exports.SubmitTaskStateChangeResponseFilterSensitiveLog = exports.SubmitTaskStateChangeRequestFilterSensitiveLog = exports.ManagedAgentStateChangeFilterSensitiveLog = exports.ContainerStateChangeFilterSensitiveLog = exports.SubmitContainerStateChangeResponseFilterSensitiveLog = exports.SubmitContainerStateChangeRequestFilterSensitiveLog = exports.SubmitAttachmentStateChangesResponseFilterSensitiveLog = exports.SubmitAttachmentStateChangesRequestFilterSensitiveLog = exports.AttachmentStateChangeFilterSensitiveLog = exports.StopTaskResponseFilterSensitiveLog = exports.StopTaskRequestFilterSensitiveLog = exports.StartTaskResponseFilterSensitiveLog = exports.StartTaskRequestFilterSensitiveLog = exports.RunTaskResponseFilterSensitiveLog = exports.RunTaskRequestFilterSensitiveLog = exports.RegisterTaskDefinitionResponseFilterSensitiveLog = exports.RegisterTaskDefinitionRequestFilterSensitiveLog = exports.RegisterContainerInstanceResponseFilterSensitiveLog = exports.RegisterContainerInstanceRequestFilterSensitiveLog = exports.PlatformDeviceFilterSensitiveLog = exports.PutClusterCapacityProvidersResponseFilterSensitiveLog = exports.PutClusterCapacityProvidersRequestFilterSensitiveLog = exports.PutAttributesResponseFilterSensitiveLog = exports.PutAttributesRequestFilterSensitiveLog = exports.PutAccountSettingDefaultResponseFilterSensitiveLog = exports.PutAccountSettingDefaultRequestFilterSensitiveLog = exports.PutAccountSettingResponseFilterSensitiveLog = exports.PutAccountSettingRequestFilterSensitiveLog = exports.ListTasksResponseFilterSensitiveLog = exports.ListTasksRequestFilterSensitiveLog = exports.ListTaskDefinitionsResponseFilterSensitiveLog = exports.ListTaskDefinitionsRequestFilterSensitiveLog = exports.ListTaskDefinitionFamiliesResponseFilterSensitiveLog = exports.ListTaskDefinitionFamiliesRequestFilterSensitiveLog = exports.ListTagsForResourceResponseFilterSensitiveLog = exports.ListTagsForResourceRequestFilterSensitiveLog = exports.ListServicesResponseFilterSensitiveLog = exports.ListServicesRequestFilterSensitiveLog = exports.ListContainerInstancesResponseFilterSensitiveLog = exports.ListContainerInstancesRequestFilterSensitiveLog = exports.ListClustersResponseFilterSensitiveLog = exports.ListClustersRequestFilterSensitiveLog = exports.ListAttributesResponseFilterSensitiveLog = exports.ListAttributesRequestFilterSensitiveLog = void 0;
exports.UpdateTaskSetResponseFilterSensitiveLog = exports.UpdateTaskSetRequestFilterSensitiveLog = exports.UpdateServicePrimaryTaskSetResponseFilterSensitiveLog = exports.UpdateServicePrimaryTaskSetRequestFilterSensitiveLog = exports.UpdateServiceResponseFilterSensitiveLog = exports.UpdateServiceRequestFilterSensitiveLog = exports.UpdateContainerInstancesStateResponseFilterSensitiveLog = exports.UpdateContainerInstancesStateRequestFilterSensitiveLog = exports.UpdateContainerAgentResponseFilterSensitiveLog = exports.UpdateContainerAgentRequestFilterSensitiveLog = exports.UpdateClusterSettingsResponseFilterSensitiveLog = exports.UpdateClusterSettingsRequestFilterSensitiveLog = exports.UpdateClusterResponseFilterSensitiveLog = exports.UpdateClusterRequestFilterSensitiveLog = exports.UpdateCapacityProviderResponseFilterSensitiveLog = void 0;
const smithy_client_1 = require("@aws-sdk/smithy-client");
const ECSServiceException_1 = require("./ECSServiceException");
class AccessDeniedException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
exports.AccessDeniedException = AccessDeniedException;
var AgentUpdateStatus;
(function (AgentUpdateStatus) {
    AgentUpdateStatus["FAILED"] = "FAILED";
    AgentUpdateStatus["PENDING"] = "PENDING";
    AgentUpdateStatus["STAGED"] = "STAGED";
    AgentUpdateStatus["STAGING"] = "STAGING";
    AgentUpdateStatus["UPDATED"] = "UPDATED";
    AgentUpdateStatus["UPDATING"] = "UPDATING";
})(AgentUpdateStatus = exports.AgentUpdateStatus || (exports.AgentUpdateStatus = {}));
class ClientException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ClientException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClientException.prototype);
    }
}
exports.ClientException = ClientException;
var ManagedScalingStatus;
(function (ManagedScalingStatus) {
    ManagedScalingStatus["DISABLED"] = "DISABLED";
    ManagedScalingStatus["ENABLED"] = "ENABLED";
})(ManagedScalingStatus = exports.ManagedScalingStatus || (exports.ManagedScalingStatus = {}));
var ManagedTerminationProtection;
(function (ManagedTerminationProtection) {
    ManagedTerminationProtection["DISABLED"] = "DISABLED";
    ManagedTerminationProtection["ENABLED"] = "ENABLED";
})(ManagedTerminationProtection = exports.ManagedTerminationProtection || (exports.ManagedTerminationProtection = {}));
var CapacityProviderStatus;
(function (CapacityProviderStatus) {
    CapacityProviderStatus["ACTIVE"] = "ACTIVE";
    CapacityProviderStatus["INACTIVE"] = "INACTIVE";
})(CapacityProviderStatus = exports.CapacityProviderStatus || (exports.CapacityProviderStatus = {}));
var CapacityProviderUpdateStatus;
(function (CapacityProviderUpdateStatus) {
    CapacityProviderUpdateStatus["DELETE_COMPLETE"] = "DELETE_COMPLETE";
    CapacityProviderUpdateStatus["DELETE_FAILED"] = "DELETE_FAILED";
    CapacityProviderUpdateStatus["DELETE_IN_PROGRESS"] = "DELETE_IN_PROGRESS";
    CapacityProviderUpdateStatus["UPDATE_COMPLETE"] = "UPDATE_COMPLETE";
    CapacityProviderUpdateStatus["UPDATE_FAILED"] = "UPDATE_FAILED";
    CapacityProviderUpdateStatus["UPDATE_IN_PROGRESS"] = "UPDATE_IN_PROGRESS";
})(CapacityProviderUpdateStatus = exports.CapacityProviderUpdateStatus || (exports.CapacityProviderUpdateStatus = {}));
class InvalidParameterException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
exports.InvalidParameterException = InvalidParameterException;
class LimitExceededException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
exports.LimitExceededException = LimitExceededException;
class ServerException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServerException.prototype);
    }
}
exports.ServerException = ServerException;
class UpdateInProgressException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "UpdateInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "UpdateInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UpdateInProgressException.prototype);
    }
}
exports.UpdateInProgressException = UpdateInProgressException;
var ExecuteCommandLogging;
(function (ExecuteCommandLogging) {
    ExecuteCommandLogging["DEFAULT"] = "DEFAULT";
    ExecuteCommandLogging["NONE"] = "NONE";
    ExecuteCommandLogging["OVERRIDE"] = "OVERRIDE";
})(ExecuteCommandLogging = exports.ExecuteCommandLogging || (exports.ExecuteCommandLogging = {}));
var ClusterSettingName;
(function (ClusterSettingName) {
    ClusterSettingName["CONTAINER_INSIGHTS"] = "containerInsights";
})(ClusterSettingName = exports.ClusterSettingName || (exports.ClusterSettingName = {}));
class ClusterNotFoundException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ClusterNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClusterNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClusterNotFoundException.prototype);
    }
}
exports.ClusterNotFoundException = ClusterNotFoundException;
var DeploymentControllerType;
(function (DeploymentControllerType) {
    DeploymentControllerType["CODE_DEPLOY"] = "CODE_DEPLOY";
    DeploymentControllerType["ECS"] = "ECS";
    DeploymentControllerType["EXTERNAL"] = "EXTERNAL";
})(DeploymentControllerType = exports.DeploymentControllerType || (exports.DeploymentControllerType = {}));
var LaunchType;
(function (LaunchType) {
    LaunchType["EC2"] = "EC2";
    LaunchType["EXTERNAL"] = "EXTERNAL";
    LaunchType["FARGATE"] = "FARGATE";
})(LaunchType = exports.LaunchType || (exports.LaunchType = {}));
var AssignPublicIp;
(function (AssignPublicIp) {
    AssignPublicIp["DISABLED"] = "DISABLED";
    AssignPublicIp["ENABLED"] = "ENABLED";
})(AssignPublicIp = exports.AssignPublicIp || (exports.AssignPublicIp = {}));
var PlacementConstraintType;
(function (PlacementConstraintType) {
    PlacementConstraintType["DISTINCT_INSTANCE"] = "distinctInstance";
    PlacementConstraintType["MEMBER_OF"] = "memberOf";
})(PlacementConstraintType = exports.PlacementConstraintType || (exports.PlacementConstraintType = {}));
var PlacementStrategyType;
(function (PlacementStrategyType) {
    PlacementStrategyType["BINPACK"] = "binpack";
    PlacementStrategyType["RANDOM"] = "random";
    PlacementStrategyType["SPREAD"] = "spread";
})(PlacementStrategyType = exports.PlacementStrategyType || (exports.PlacementStrategyType = {}));
var PropagateTags;
(function (PropagateTags) {
    PropagateTags["NONE"] = "NONE";
    PropagateTags["SERVICE"] = "SERVICE";
    PropagateTags["TASK_DEFINITION"] = "TASK_DEFINITION";
})(PropagateTags = exports.PropagateTags || (exports.PropagateTags = {}));
var SchedulingStrategy;
(function (SchedulingStrategy) {
    SchedulingStrategy["DAEMON"] = "DAEMON";
    SchedulingStrategy["REPLICA"] = "REPLICA";
})(SchedulingStrategy = exports.SchedulingStrategy || (exports.SchedulingStrategy = {}));
var DeploymentRolloutState;
(function (DeploymentRolloutState) {
    DeploymentRolloutState["COMPLETED"] = "COMPLETED";
    DeploymentRolloutState["FAILED"] = "FAILED";
    DeploymentRolloutState["IN_PROGRESS"] = "IN_PROGRESS";
})(DeploymentRolloutState = exports.DeploymentRolloutState || (exports.DeploymentRolloutState = {}));
var ScaleUnit;
(function (ScaleUnit) {
    ScaleUnit["PERCENT"] = "PERCENT";
})(ScaleUnit = exports.ScaleUnit || (exports.ScaleUnit = {}));
var StabilityStatus;
(function (StabilityStatus) {
    StabilityStatus["STABILIZING"] = "STABILIZING";
    StabilityStatus["STEADY_STATE"] = "STEADY_STATE";
})(StabilityStatus = exports.StabilityStatus || (exports.StabilityStatus = {}));
class PlatformTaskDefinitionIncompatibilityException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "PlatformTaskDefinitionIncompatibilityException",
            $fault: "client",
            ...opts,
        });
        this.name = "PlatformTaskDefinitionIncompatibilityException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PlatformTaskDefinitionIncompatibilityException.prototype);
    }
}
exports.PlatformTaskDefinitionIncompatibilityException = PlatformTaskDefinitionIncompatibilityException;
class PlatformUnknownException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "PlatformUnknownException",
            $fault: "client",
            ...opts,
        });
        this.name = "PlatformUnknownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PlatformUnknownException.prototype);
    }
}
exports.PlatformUnknownException = PlatformUnknownException;
class UnsupportedFeatureException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedFeatureException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedFeatureException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedFeatureException.prototype);
    }
}
exports.UnsupportedFeatureException = UnsupportedFeatureException;
class ServiceNotActiveException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ServiceNotActiveException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceNotActiveException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceNotActiveException.prototype);
    }
}
exports.ServiceNotActiveException = ServiceNotActiveException;
class ServiceNotFoundException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ServiceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceNotFoundException.prototype);
    }
}
exports.ServiceNotFoundException = ServiceNotFoundException;
var SettingName;
(function (SettingName) {
    SettingName["AWSVPC_TRUNKING"] = "awsvpcTrunking";
    SettingName["CONTAINER_INSIGHTS"] = "containerInsights";
    SettingName["CONTAINER_INSTANCE_LONG_ARN_FORMAT"] = "containerInstanceLongArnFormat";
    SettingName["SERVICE_LONG_ARN_FORMAT"] = "serviceLongArnFormat";
    SettingName["TASK_LONG_ARN_FORMAT"] = "taskLongArnFormat";
})(SettingName = exports.SettingName || (exports.SettingName = {}));
var TargetType;
(function (TargetType) {
    TargetType["CONTAINER_INSTANCE"] = "container-instance";
})(TargetType = exports.TargetType || (exports.TargetType = {}));
class TargetNotFoundException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "TargetNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "TargetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetNotFoundException.prototype);
    }
}
exports.TargetNotFoundException = TargetNotFoundException;
class ClusterContainsContainerInstancesException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ClusterContainsContainerInstancesException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClusterContainsContainerInstancesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClusterContainsContainerInstancesException.prototype);
    }
}
exports.ClusterContainsContainerInstancesException = ClusterContainsContainerInstancesException;
class ClusterContainsServicesException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ClusterContainsServicesException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClusterContainsServicesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClusterContainsServicesException.prototype);
    }
}
exports.ClusterContainsServicesException = ClusterContainsServicesException;
class ClusterContainsTasksException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ClusterContainsTasksException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClusterContainsTasksException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClusterContainsTasksException.prototype);
    }
}
exports.ClusterContainsTasksException = ClusterContainsTasksException;
class TaskSetNotFoundException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "TaskSetNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "TaskSetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TaskSetNotFoundException.prototype);
    }
}
exports.TaskSetNotFoundException = TaskSetNotFoundException;
var InstanceHealthCheckState;
(function (InstanceHealthCheckState) {
    InstanceHealthCheckState["IMPAIRED"] = "IMPAIRED";
    InstanceHealthCheckState["INITIALIZING"] = "INITIALIZING";
    InstanceHealthCheckState["INSUFFICIENT_DATA"] = "INSUFFICIENT_DATA";
    InstanceHealthCheckState["OK"] = "OK";
})(InstanceHealthCheckState = exports.InstanceHealthCheckState || (exports.InstanceHealthCheckState = {}));
var InstanceHealthCheckType;
(function (InstanceHealthCheckType) {
    InstanceHealthCheckType["CONTAINER_RUNTIME"] = "CONTAINER_RUNTIME";
})(InstanceHealthCheckType = exports.InstanceHealthCheckType || (exports.InstanceHealthCheckType = {}));
var Compatibility;
(function (Compatibility) {
    Compatibility["EC2"] = "EC2";
    Compatibility["EXTERNAL"] = "EXTERNAL";
    Compatibility["FARGATE"] = "FARGATE";
})(Compatibility = exports.Compatibility || (exports.Compatibility = {}));
var ContainerCondition;
(function (ContainerCondition) {
    ContainerCondition["COMPLETE"] = "COMPLETE";
    ContainerCondition["HEALTHY"] = "HEALTHY";
    ContainerCondition["START"] = "START";
    ContainerCondition["SUCCESS"] = "SUCCESS";
})(ContainerCondition = exports.ContainerCondition || (exports.ContainerCondition = {}));
var EnvironmentFileType;
(function (EnvironmentFileType) {
    EnvironmentFileType["S3"] = "s3";
})(EnvironmentFileType = exports.EnvironmentFileType || (exports.EnvironmentFileType = {}));
var FirelensConfigurationType;
(function (FirelensConfigurationType) {
    FirelensConfigurationType["FLUENTBIT"] = "fluentbit";
    FirelensConfigurationType["FLUENTD"] = "fluentd";
})(FirelensConfigurationType = exports.FirelensConfigurationType || (exports.FirelensConfigurationType = {}));
var DeviceCgroupPermission;
(function (DeviceCgroupPermission) {
    DeviceCgroupPermission["MKNOD"] = "mknod";
    DeviceCgroupPermission["READ"] = "read";
    DeviceCgroupPermission["WRITE"] = "write";
})(DeviceCgroupPermission = exports.DeviceCgroupPermission || (exports.DeviceCgroupPermission = {}));
var LogDriver;
(function (LogDriver) {
    LogDriver["AWSFIRELENS"] = "awsfirelens";
    LogDriver["AWSLOGS"] = "awslogs";
    LogDriver["FLUENTD"] = "fluentd";
    LogDriver["GELF"] = "gelf";
    LogDriver["JOURNALD"] = "journald";
    LogDriver["JSON_FILE"] = "json-file";
    LogDriver["SPLUNK"] = "splunk";
    LogDriver["SYSLOG"] = "syslog";
})(LogDriver = exports.LogDriver || (exports.LogDriver = {}));
var TransportProtocol;
(function (TransportProtocol) {
    TransportProtocol["TCP"] = "tcp";
    TransportProtocol["UDP"] = "udp";
})(TransportProtocol = exports.TransportProtocol || (exports.TransportProtocol = {}));
var ResourceType;
(function (ResourceType) {
    ResourceType["GPU"] = "GPU";
    ResourceType["INFERENCE_ACCELERATOR"] = "InferenceAccelerator";
})(ResourceType = exports.ResourceType || (exports.ResourceType = {}));
var UlimitName;
(function (UlimitName) {
    UlimitName["CORE"] = "core";
    UlimitName["CPU"] = "cpu";
    UlimitName["DATA"] = "data";
    UlimitName["FSIZE"] = "fsize";
    UlimitName["LOCKS"] = "locks";
    UlimitName["MEMLOCK"] = "memlock";
    UlimitName["MSGQUEUE"] = "msgqueue";
    UlimitName["NICE"] = "nice";
    UlimitName["NOFILE"] = "nofile";
    UlimitName["NPROC"] = "nproc";
    UlimitName["RSS"] = "rss";
    UlimitName["RTPRIO"] = "rtprio";
    UlimitName["RTTIME"] = "rttime";
    UlimitName["SIGPENDING"] = "sigpending";
    UlimitName["STACK"] = "stack";
})(UlimitName = exports.UlimitName || (exports.UlimitName = {}));
var IpcMode;
(function (IpcMode) {
    IpcMode["HOST"] = "host";
    IpcMode["NONE"] = "none";
    IpcMode["TASK"] = "task";
})(IpcMode = exports.IpcMode || (exports.IpcMode = {}));
var NetworkMode;
(function (NetworkMode) {
    NetworkMode["AWSVPC"] = "awsvpc";
    NetworkMode["BRIDGE"] = "bridge";
    NetworkMode["HOST"] = "host";
    NetworkMode["NONE"] = "none";
})(NetworkMode = exports.NetworkMode || (exports.NetworkMode = {}));
var PidMode;
(function (PidMode) {
    PidMode["HOST"] = "host";
    PidMode["TASK"] = "task";
})(PidMode = exports.PidMode || (exports.PidMode = {}));
var TaskDefinitionPlacementConstraintType;
(function (TaskDefinitionPlacementConstraintType) {
    TaskDefinitionPlacementConstraintType["MEMBER_OF"] = "memberOf";
})(TaskDefinitionPlacementConstraintType = exports.TaskDefinitionPlacementConstraintType || (exports.TaskDefinitionPlacementConstraintType = {}));
var ProxyConfigurationType;
(function (ProxyConfigurationType) {
    ProxyConfigurationType["APPMESH"] = "APPMESH";
})(ProxyConfigurationType = exports.ProxyConfigurationType || (exports.ProxyConfigurationType = {}));
var CPUArchitecture;
(function (CPUArchitecture) {
    CPUArchitecture["ARM64"] = "ARM64";
    CPUArchitecture["X86_64"] = "X86_64";
})(CPUArchitecture = exports.CPUArchitecture || (exports.CPUArchitecture = {}));
var OSFamily;
(function (OSFamily) {
    OSFamily["LINUX"] = "LINUX";
    OSFamily["WINDOWS_SERVER_2004_CORE"] = "WINDOWS_SERVER_2004_CORE";
    OSFamily["WINDOWS_SERVER_2016_FULL"] = "WINDOWS_SERVER_2016_FULL";
    OSFamily["WINDOWS_SERVER_2019_CORE"] = "WINDOWS_SERVER_2019_CORE";
    OSFamily["WINDOWS_SERVER_2019_FULL"] = "WINDOWS_SERVER_2019_FULL";
    OSFamily["WINDOWS_SERVER_2022_CORE"] = "WINDOWS_SERVER_2022_CORE";
    OSFamily["WINDOWS_SERVER_2022_FULL"] = "WINDOWS_SERVER_2022_FULL";
    OSFamily["WINDOWS_SERVER_20H2_CORE"] = "WINDOWS_SERVER_20H2_CORE";
})(OSFamily = exports.OSFamily || (exports.OSFamily = {}));
var TaskDefinitionStatus;
(function (TaskDefinitionStatus) {
    TaskDefinitionStatus["ACTIVE"] = "ACTIVE";
    TaskDefinitionStatus["INACTIVE"] = "INACTIVE";
})(TaskDefinitionStatus = exports.TaskDefinitionStatus || (exports.TaskDefinitionStatus = {}));
var Scope;
(function (Scope) {
    Scope["SHARED"] = "shared";
    Scope["TASK"] = "task";
})(Scope = exports.Scope || (exports.Scope = {}));
var EFSAuthorizationConfigIAM;
(function (EFSAuthorizationConfigIAM) {
    EFSAuthorizationConfigIAM["DISABLED"] = "DISABLED";
    EFSAuthorizationConfigIAM["ENABLED"] = "ENABLED";
})(EFSAuthorizationConfigIAM = exports.EFSAuthorizationConfigIAM || (exports.EFSAuthorizationConfigIAM = {}));
var EFSTransitEncryption;
(function (EFSTransitEncryption) {
    EFSTransitEncryption["DISABLED"] = "DISABLED";
    EFSTransitEncryption["ENABLED"] = "ENABLED";
})(EFSTransitEncryption = exports.EFSTransitEncryption || (exports.EFSTransitEncryption = {}));
var CapacityProviderField;
(function (CapacityProviderField) {
    CapacityProviderField["TAGS"] = "TAGS";
})(CapacityProviderField = exports.CapacityProviderField || (exports.CapacityProviderField = {}));
var ClusterField;
(function (ClusterField) {
    ClusterField["ATTACHMENTS"] = "ATTACHMENTS";
    ClusterField["CONFIGURATIONS"] = "CONFIGURATIONS";
    ClusterField["SETTINGS"] = "SETTINGS";
    ClusterField["STATISTICS"] = "STATISTICS";
    ClusterField["TAGS"] = "TAGS";
})(ClusterField = exports.ClusterField || (exports.ClusterField = {}));
var ContainerInstanceField;
(function (ContainerInstanceField) {
    ContainerInstanceField["CONTAINER_INSTANCE_HEALTH"] = "CONTAINER_INSTANCE_HEALTH";
    ContainerInstanceField["TAGS"] = "TAGS";
})(ContainerInstanceField = exports.ContainerInstanceField || (exports.ContainerInstanceField = {}));
var ServiceField;
(function (ServiceField) {
    ServiceField["TAGS"] = "TAGS";
})(ServiceField = exports.ServiceField || (exports.ServiceField = {}));
var TaskDefinitionField;
(function (TaskDefinitionField) {
    TaskDefinitionField["TAGS"] = "TAGS";
})(TaskDefinitionField = exports.TaskDefinitionField || (exports.TaskDefinitionField = {}));
var TaskField;
(function (TaskField) {
    TaskField["TAGS"] = "TAGS";
})(TaskField = exports.TaskField || (exports.TaskField = {}));
var Connectivity;
(function (Connectivity) {
    Connectivity["CONNECTED"] = "CONNECTED";
    Connectivity["DISCONNECTED"] = "DISCONNECTED";
})(Connectivity = exports.Connectivity || (exports.Connectivity = {}));
var HealthStatus;
(function (HealthStatus) {
    HealthStatus["HEALTHY"] = "HEALTHY";
    HealthStatus["UNHEALTHY"] = "UNHEALTHY";
    HealthStatus["UNKNOWN"] = "UNKNOWN";
})(HealthStatus = exports.HealthStatus || (exports.HealthStatus = {}));
var ManagedAgentName;
(function (ManagedAgentName) {
    ManagedAgentName["ExecuteCommandAgent"] = "ExecuteCommandAgent";
})(ManagedAgentName = exports.ManagedAgentName || (exports.ManagedAgentName = {}));
var TaskStopCode;
(function (TaskStopCode) {
    TaskStopCode["ESSENTIAL_CONTAINER_EXITED"] = "EssentialContainerExited";
    TaskStopCode["TASK_FAILED_TO_START"] = "TaskFailedToStart";
    TaskStopCode["USER_INITIATED"] = "UserInitiated";
})(TaskStopCode = exports.TaskStopCode || (exports.TaskStopCode = {}));
var TaskSetField;
(function (TaskSetField) {
    TaskSetField["TAGS"] = "TAGS";
})(TaskSetField = exports.TaskSetField || (exports.TaskSetField = {}));
class TargetNotConnectedException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "TargetNotConnectedException",
            $fault: "client",
            ...opts,
        });
        this.name = "TargetNotConnectedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TargetNotConnectedException.prototype);
    }
}
exports.TargetNotConnectedException = TargetNotConnectedException;
var ContainerInstanceStatus;
(function (ContainerInstanceStatus) {
    ContainerInstanceStatus["ACTIVE"] = "ACTIVE";
    ContainerInstanceStatus["DEREGISTERING"] = "DEREGISTERING";
    ContainerInstanceStatus["DRAINING"] = "DRAINING";
    ContainerInstanceStatus["REGISTERING"] = "REGISTERING";
    ContainerInstanceStatus["REGISTRATION_FAILED"] = "REGISTRATION_FAILED";
})(ContainerInstanceStatus = exports.ContainerInstanceStatus || (exports.ContainerInstanceStatus = {}));
var TaskDefinitionFamilyStatus;
(function (TaskDefinitionFamilyStatus) {
    TaskDefinitionFamilyStatus["ACTIVE"] = "ACTIVE";
    TaskDefinitionFamilyStatus["ALL"] = "ALL";
    TaskDefinitionFamilyStatus["INACTIVE"] = "INACTIVE";
})(TaskDefinitionFamilyStatus = exports.TaskDefinitionFamilyStatus || (exports.TaskDefinitionFamilyStatus = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder = exports.SortOrder || (exports.SortOrder = {}));
var DesiredStatus;
(function (DesiredStatus) {
    DesiredStatus["PENDING"] = "PENDING";
    DesiredStatus["RUNNING"] = "RUNNING";
    DesiredStatus["STOPPED"] = "STOPPED";
})(DesiredStatus = exports.DesiredStatus || (exports.DesiredStatus = {}));
class AttributeLimitExceededException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "AttributeLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "AttributeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AttributeLimitExceededException.prototype);
    }
}
exports.AttributeLimitExceededException = AttributeLimitExceededException;
class ResourceInUseException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
exports.ResourceInUseException = ResourceInUseException;
var PlatformDeviceType;
(function (PlatformDeviceType) {
    PlatformDeviceType["GPU"] = "GPU";
})(PlatformDeviceType = exports.PlatformDeviceType || (exports.PlatformDeviceType = {}));
class BlockedException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "BlockedException",
            $fault: "client",
            ...opts,
        });
        this.name = "BlockedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BlockedException.prototype);
    }
}
exports.BlockedException = BlockedException;
class ResourceNotFoundException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class MissingVersionException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "MissingVersionException",
            $fault: "client",
            ...opts,
        });
        this.name = "MissingVersionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MissingVersionException.prototype);
    }
}
exports.MissingVersionException = MissingVersionException;
class NoUpdateAvailableException extends ECSServiceException_1.ECSServiceException {
    constructor(opts) {
        super({
            name: "NoUpdateAvailableException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoUpdateAvailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoUpdateAvailableException.prototype);
    }
}
exports.NoUpdateAvailableException = NoUpdateAvailableException;
const ManagedScalingFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ManagedScalingFilterSensitiveLog = ManagedScalingFilterSensitiveLog;
const AutoScalingGroupProviderFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AutoScalingGroupProviderFilterSensitiveLog = AutoScalingGroupProviderFilterSensitiveLog;
const TagFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
const CreateCapacityProviderRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateCapacityProviderRequestFilterSensitiveLog = CreateCapacityProviderRequestFilterSensitiveLog;
const CapacityProviderFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CapacityProviderFilterSensitiveLog = CapacityProviderFilterSensitiveLog;
const CreateCapacityProviderResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateCapacityProviderResponseFilterSensitiveLog = CreateCapacityProviderResponseFilterSensitiveLog;
const ExecuteCommandLogConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExecuteCommandLogConfigurationFilterSensitiveLog = ExecuteCommandLogConfigurationFilterSensitiveLog;
const ExecuteCommandConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExecuteCommandConfigurationFilterSensitiveLog = ExecuteCommandConfigurationFilterSensitiveLog;
const ClusterConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ClusterConfigurationFilterSensitiveLog = ClusterConfigurationFilterSensitiveLog;
const CapacityProviderStrategyItemFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CapacityProviderStrategyItemFilterSensitiveLog = CapacityProviderStrategyItemFilterSensitiveLog;
const ClusterSettingFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ClusterSettingFilterSensitiveLog = ClusterSettingFilterSensitiveLog;
const CreateClusterRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateClusterRequestFilterSensitiveLog = CreateClusterRequestFilterSensitiveLog;
const KeyValuePairFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.KeyValuePairFilterSensitiveLog = KeyValuePairFilterSensitiveLog;
const AttachmentFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AttachmentFilterSensitiveLog = AttachmentFilterSensitiveLog;
const ClusterFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ClusterFilterSensitiveLog = ClusterFilterSensitiveLog;
const CreateClusterResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateClusterResponseFilterSensitiveLog = CreateClusterResponseFilterSensitiveLog;
const DeploymentCircuitBreakerFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeploymentCircuitBreakerFilterSensitiveLog = DeploymentCircuitBreakerFilterSensitiveLog;
const DeploymentConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeploymentConfigurationFilterSensitiveLog = DeploymentConfigurationFilterSensitiveLog;
const DeploymentControllerFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeploymentControllerFilterSensitiveLog = DeploymentControllerFilterSensitiveLog;
const LoadBalancerFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LoadBalancerFilterSensitiveLog = LoadBalancerFilterSensitiveLog;
const AwsVpcConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AwsVpcConfigurationFilterSensitiveLog = AwsVpcConfigurationFilterSensitiveLog;
const NetworkConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NetworkConfigurationFilterSensitiveLog = NetworkConfigurationFilterSensitiveLog;
const PlacementConstraintFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PlacementConstraintFilterSensitiveLog = PlacementConstraintFilterSensitiveLog;
const PlacementStrategyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PlacementStrategyFilterSensitiveLog = PlacementStrategyFilterSensitiveLog;
const ServiceRegistryFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ServiceRegistryFilterSensitiveLog = ServiceRegistryFilterSensitiveLog;
const CreateServiceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateServiceRequestFilterSensitiveLog = CreateServiceRequestFilterSensitiveLog;
const DeploymentFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeploymentFilterSensitiveLog = DeploymentFilterSensitiveLog;
const ServiceEventFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ServiceEventFilterSensitiveLog = ServiceEventFilterSensitiveLog;
const ScaleFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ScaleFilterSensitiveLog = ScaleFilterSensitiveLog;
const TaskSetFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TaskSetFilterSensitiveLog = TaskSetFilterSensitiveLog;
const ServiceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ServiceFilterSensitiveLog = ServiceFilterSensitiveLog;
const CreateServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateServiceResponseFilterSensitiveLog = CreateServiceResponseFilterSensitiveLog;
const CreateTaskSetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateTaskSetRequestFilterSensitiveLog = CreateTaskSetRequestFilterSensitiveLog;
const CreateTaskSetResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateTaskSetResponseFilterSensitiveLog = CreateTaskSetResponseFilterSensitiveLog;
const DeleteAccountSettingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteAccountSettingRequestFilterSensitiveLog = DeleteAccountSettingRequestFilterSensitiveLog;
const SettingFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SettingFilterSensitiveLog = SettingFilterSensitiveLog;
const DeleteAccountSettingResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteAccountSettingResponseFilterSensitiveLog = DeleteAccountSettingResponseFilterSensitiveLog;
const AttributeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AttributeFilterSensitiveLog = AttributeFilterSensitiveLog;
const DeleteAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteAttributesRequestFilterSensitiveLog = DeleteAttributesRequestFilterSensitiveLog;
const DeleteAttributesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteAttributesResponseFilterSensitiveLog = DeleteAttributesResponseFilterSensitiveLog;
const DeleteCapacityProviderRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteCapacityProviderRequestFilterSensitiveLog = DeleteCapacityProviderRequestFilterSensitiveLog;
const DeleteCapacityProviderResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteCapacityProviderResponseFilterSensitiveLog = DeleteCapacityProviderResponseFilterSensitiveLog;
const DeleteClusterRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteClusterRequestFilterSensitiveLog = DeleteClusterRequestFilterSensitiveLog;
const DeleteClusterResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteClusterResponseFilterSensitiveLog = DeleteClusterResponseFilterSensitiveLog;
const DeleteServiceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteServiceRequestFilterSensitiveLog = DeleteServiceRequestFilterSensitiveLog;
const DeleteServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteServiceResponseFilterSensitiveLog = DeleteServiceResponseFilterSensitiveLog;
const DeleteTaskSetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteTaskSetRequestFilterSensitiveLog = DeleteTaskSetRequestFilterSensitiveLog;
const DeleteTaskSetResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteTaskSetResponseFilterSensitiveLog = DeleteTaskSetResponseFilterSensitiveLog;
const DeregisterContainerInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeregisterContainerInstanceRequestFilterSensitiveLog = DeregisterContainerInstanceRequestFilterSensitiveLog;
const InstanceHealthCheckResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.InstanceHealthCheckResultFilterSensitiveLog = InstanceHealthCheckResultFilterSensitiveLog;
const ContainerInstanceHealthStatusFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ContainerInstanceHealthStatusFilterSensitiveLog = ContainerInstanceHealthStatusFilterSensitiveLog;
const ResourceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ResourceFilterSensitiveLog = ResourceFilterSensitiveLog;
const VersionInfoFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.VersionInfoFilterSensitiveLog = VersionInfoFilterSensitiveLog;
const ContainerInstanceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ContainerInstanceFilterSensitiveLog = ContainerInstanceFilterSensitiveLog;
const DeregisterContainerInstanceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeregisterContainerInstanceResponseFilterSensitiveLog = DeregisterContainerInstanceResponseFilterSensitiveLog;
const DeregisterTaskDefinitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeregisterTaskDefinitionRequestFilterSensitiveLog = DeregisterTaskDefinitionRequestFilterSensitiveLog;
const ContainerDependencyFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ContainerDependencyFilterSensitiveLog = ContainerDependencyFilterSensitiveLog;
const EnvironmentFileFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EnvironmentFileFilterSensitiveLog = EnvironmentFileFilterSensitiveLog;
const HostEntryFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.HostEntryFilterSensitiveLog = HostEntryFilterSensitiveLog;
const FirelensConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FirelensConfigurationFilterSensitiveLog = FirelensConfigurationFilterSensitiveLog;
const HealthCheckFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.HealthCheckFilterSensitiveLog = HealthCheckFilterSensitiveLog;
const KernelCapabilitiesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.KernelCapabilitiesFilterSensitiveLog = KernelCapabilitiesFilterSensitiveLog;
const DeviceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeviceFilterSensitiveLog = DeviceFilterSensitiveLog;
const TmpfsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TmpfsFilterSensitiveLog = TmpfsFilterSensitiveLog;
const LinuxParametersFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LinuxParametersFilterSensitiveLog = LinuxParametersFilterSensitiveLog;
const SecretFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SecretFilterSensitiveLog = SecretFilterSensitiveLog;
const LogConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.LogConfigurationFilterSensitiveLog = LogConfigurationFilterSensitiveLog;
const MountPointFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MountPointFilterSensitiveLog = MountPointFilterSensitiveLog;
const PortMappingFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PortMappingFilterSensitiveLog = PortMappingFilterSensitiveLog;
const RepositoryCredentialsFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RepositoryCredentialsFilterSensitiveLog = RepositoryCredentialsFilterSensitiveLog;
const ResourceRequirementFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ResourceRequirementFilterSensitiveLog = ResourceRequirementFilterSensitiveLog;
const SystemControlFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SystemControlFilterSensitiveLog = SystemControlFilterSensitiveLog;
const UlimitFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UlimitFilterSensitiveLog = UlimitFilterSensitiveLog;
const VolumeFromFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.VolumeFromFilterSensitiveLog = VolumeFromFilterSensitiveLog;
const ContainerDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ContainerDefinitionFilterSensitiveLog = ContainerDefinitionFilterSensitiveLog;
const EphemeralStorageFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EphemeralStorageFilterSensitiveLog = EphemeralStorageFilterSensitiveLog;
const InferenceAcceleratorFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.InferenceAcceleratorFilterSensitiveLog = InferenceAcceleratorFilterSensitiveLog;
const TaskDefinitionPlacementConstraintFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TaskDefinitionPlacementConstraintFilterSensitiveLog = TaskDefinitionPlacementConstraintFilterSensitiveLog;
const ProxyConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ProxyConfigurationFilterSensitiveLog = ProxyConfigurationFilterSensitiveLog;
const RuntimePlatformFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RuntimePlatformFilterSensitiveLog = RuntimePlatformFilterSensitiveLog;
const DockerVolumeConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DockerVolumeConfigurationFilterSensitiveLog = DockerVolumeConfigurationFilterSensitiveLog;
const EFSAuthorizationConfigFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EFSAuthorizationConfigFilterSensitiveLog = EFSAuthorizationConfigFilterSensitiveLog;
const EFSVolumeConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EFSVolumeConfigurationFilterSensitiveLog = EFSVolumeConfigurationFilterSensitiveLog;
const FSxWindowsFileServerAuthorizationConfigFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FSxWindowsFileServerAuthorizationConfigFilterSensitiveLog = FSxWindowsFileServerAuthorizationConfigFilterSensitiveLog;
const FSxWindowsFileServerVolumeConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FSxWindowsFileServerVolumeConfigurationFilterSensitiveLog = FSxWindowsFileServerVolumeConfigurationFilterSensitiveLog;
const HostVolumePropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.HostVolumePropertiesFilterSensitiveLog = HostVolumePropertiesFilterSensitiveLog;
const VolumeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.VolumeFilterSensitiveLog = VolumeFilterSensitiveLog;
const TaskDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TaskDefinitionFilterSensitiveLog = TaskDefinitionFilterSensitiveLog;
const DeregisterTaskDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeregisterTaskDefinitionResponseFilterSensitiveLog = DeregisterTaskDefinitionResponseFilterSensitiveLog;
const DescribeCapacityProvidersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeCapacityProvidersRequestFilterSensitiveLog = DescribeCapacityProvidersRequestFilterSensitiveLog;
const FailureFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.FailureFilterSensitiveLog = FailureFilterSensitiveLog;
const DescribeCapacityProvidersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeCapacityProvidersResponseFilterSensitiveLog = DescribeCapacityProvidersResponseFilterSensitiveLog;
const DescribeClustersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeClustersRequestFilterSensitiveLog = DescribeClustersRequestFilterSensitiveLog;
const DescribeClustersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeClustersResponseFilterSensitiveLog = DescribeClustersResponseFilterSensitiveLog;
const DescribeContainerInstancesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeContainerInstancesRequestFilterSensitiveLog = DescribeContainerInstancesRequestFilterSensitiveLog;
const DescribeContainerInstancesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeContainerInstancesResponseFilterSensitiveLog = DescribeContainerInstancesResponseFilterSensitiveLog;
const DescribeServicesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeServicesRequestFilterSensitiveLog = DescribeServicesRequestFilterSensitiveLog;
const DescribeServicesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeServicesResponseFilterSensitiveLog = DescribeServicesResponseFilterSensitiveLog;
const DescribeTaskDefinitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTaskDefinitionRequestFilterSensitiveLog = DescribeTaskDefinitionRequestFilterSensitiveLog;
const DescribeTaskDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTaskDefinitionResponseFilterSensitiveLog = DescribeTaskDefinitionResponseFilterSensitiveLog;
const DescribeTasksRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTasksRequestFilterSensitiveLog = DescribeTasksRequestFilterSensitiveLog;
const ManagedAgentFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ManagedAgentFilterSensitiveLog = ManagedAgentFilterSensitiveLog;
const NetworkBindingFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NetworkBindingFilterSensitiveLog = NetworkBindingFilterSensitiveLog;
const NetworkInterfaceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.NetworkInterfaceFilterSensitiveLog = NetworkInterfaceFilterSensitiveLog;
const ContainerFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ContainerFilterSensitiveLog = ContainerFilterSensitiveLog;
const ContainerOverrideFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ContainerOverrideFilterSensitiveLog = ContainerOverrideFilterSensitiveLog;
const InferenceAcceleratorOverrideFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.InferenceAcceleratorOverrideFilterSensitiveLog = InferenceAcceleratorOverrideFilterSensitiveLog;
const TaskOverrideFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TaskOverrideFilterSensitiveLog = TaskOverrideFilterSensitiveLog;
const TaskFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TaskFilterSensitiveLog = TaskFilterSensitiveLog;
const DescribeTasksResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTasksResponseFilterSensitiveLog = DescribeTasksResponseFilterSensitiveLog;
const DescribeTaskSetsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTaskSetsRequestFilterSensitiveLog = DescribeTaskSetsRequestFilterSensitiveLog;
const DescribeTaskSetsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTaskSetsResponseFilterSensitiveLog = DescribeTaskSetsResponseFilterSensitiveLog;
const DiscoverPollEndpointRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DiscoverPollEndpointRequestFilterSensitiveLog = DiscoverPollEndpointRequestFilterSensitiveLog;
const DiscoverPollEndpointResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DiscoverPollEndpointResponseFilterSensitiveLog = DiscoverPollEndpointResponseFilterSensitiveLog;
const ExecuteCommandRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ExecuteCommandRequestFilterSensitiveLog = ExecuteCommandRequestFilterSensitiveLog;
const SessionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.tokenValue && { tokenValue: smithy_client_1.SENSITIVE_STRING }),
});
exports.SessionFilterSensitiveLog = SessionFilterSensitiveLog;
const ExecuteCommandResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.session && { session: (0, exports.SessionFilterSensitiveLog)(obj.session) }),
});
exports.ExecuteCommandResponseFilterSensitiveLog = ExecuteCommandResponseFilterSensitiveLog;
const ListAccountSettingsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListAccountSettingsRequestFilterSensitiveLog = ListAccountSettingsRequestFilterSensitiveLog;
const ListAccountSettingsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListAccountSettingsResponseFilterSensitiveLog = ListAccountSettingsResponseFilterSensitiveLog;
const ListAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListAttributesRequestFilterSensitiveLog = ListAttributesRequestFilterSensitiveLog;
const ListAttributesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListAttributesResponseFilterSensitiveLog = ListAttributesResponseFilterSensitiveLog;
const ListClustersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListClustersRequestFilterSensitiveLog = ListClustersRequestFilterSensitiveLog;
const ListClustersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListClustersResponseFilterSensitiveLog = ListClustersResponseFilterSensitiveLog;
const ListContainerInstancesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListContainerInstancesRequestFilterSensitiveLog = ListContainerInstancesRequestFilterSensitiveLog;
const ListContainerInstancesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListContainerInstancesResponseFilterSensitiveLog = ListContainerInstancesResponseFilterSensitiveLog;
const ListServicesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListServicesRequestFilterSensitiveLog = ListServicesRequestFilterSensitiveLog;
const ListServicesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListServicesResponseFilterSensitiveLog = ListServicesResponseFilterSensitiveLog;
const ListTagsForResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTagsForResourceRequestFilterSensitiveLog = ListTagsForResourceRequestFilterSensitiveLog;
const ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTagsForResourceResponseFilterSensitiveLog = ListTagsForResourceResponseFilterSensitiveLog;
const ListTaskDefinitionFamiliesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTaskDefinitionFamiliesRequestFilterSensitiveLog = ListTaskDefinitionFamiliesRequestFilterSensitiveLog;
const ListTaskDefinitionFamiliesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTaskDefinitionFamiliesResponseFilterSensitiveLog = ListTaskDefinitionFamiliesResponseFilterSensitiveLog;
const ListTaskDefinitionsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTaskDefinitionsRequestFilterSensitiveLog = ListTaskDefinitionsRequestFilterSensitiveLog;
const ListTaskDefinitionsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTaskDefinitionsResponseFilterSensitiveLog = ListTaskDefinitionsResponseFilterSensitiveLog;
const ListTasksRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTasksRequestFilterSensitiveLog = ListTasksRequestFilterSensitiveLog;
const ListTasksResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTasksResponseFilterSensitiveLog = ListTasksResponseFilterSensitiveLog;
const PutAccountSettingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutAccountSettingRequestFilterSensitiveLog = PutAccountSettingRequestFilterSensitiveLog;
const PutAccountSettingResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutAccountSettingResponseFilterSensitiveLog = PutAccountSettingResponseFilterSensitiveLog;
const PutAccountSettingDefaultRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutAccountSettingDefaultRequestFilterSensitiveLog = PutAccountSettingDefaultRequestFilterSensitiveLog;
const PutAccountSettingDefaultResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutAccountSettingDefaultResponseFilterSensitiveLog = PutAccountSettingDefaultResponseFilterSensitiveLog;
const PutAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutAttributesRequestFilterSensitiveLog = PutAttributesRequestFilterSensitiveLog;
const PutAttributesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutAttributesResponseFilterSensitiveLog = PutAttributesResponseFilterSensitiveLog;
const PutClusterCapacityProvidersRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutClusterCapacityProvidersRequestFilterSensitiveLog = PutClusterCapacityProvidersRequestFilterSensitiveLog;
const PutClusterCapacityProvidersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PutClusterCapacityProvidersResponseFilterSensitiveLog = PutClusterCapacityProvidersResponseFilterSensitiveLog;
const PlatformDeviceFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PlatformDeviceFilterSensitiveLog = PlatformDeviceFilterSensitiveLog;
const RegisterContainerInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RegisterContainerInstanceRequestFilterSensitiveLog = RegisterContainerInstanceRequestFilterSensitiveLog;
const RegisterContainerInstanceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RegisterContainerInstanceResponseFilterSensitiveLog = RegisterContainerInstanceResponseFilterSensitiveLog;
const RegisterTaskDefinitionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RegisterTaskDefinitionRequestFilterSensitiveLog = RegisterTaskDefinitionRequestFilterSensitiveLog;
const RegisterTaskDefinitionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RegisterTaskDefinitionResponseFilterSensitiveLog = RegisterTaskDefinitionResponseFilterSensitiveLog;
const RunTaskRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RunTaskRequestFilterSensitiveLog = RunTaskRequestFilterSensitiveLog;
const RunTaskResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RunTaskResponseFilterSensitiveLog = RunTaskResponseFilterSensitiveLog;
const StartTaskRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartTaskRequestFilterSensitiveLog = StartTaskRequestFilterSensitiveLog;
const StartTaskResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StartTaskResponseFilterSensitiveLog = StartTaskResponseFilterSensitiveLog;
const StopTaskRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StopTaskRequestFilterSensitiveLog = StopTaskRequestFilterSensitiveLog;
const StopTaskResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.StopTaskResponseFilterSensitiveLog = StopTaskResponseFilterSensitiveLog;
const AttachmentStateChangeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AttachmentStateChangeFilterSensitiveLog = AttachmentStateChangeFilterSensitiveLog;
const SubmitAttachmentStateChangesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SubmitAttachmentStateChangesRequestFilterSensitiveLog = SubmitAttachmentStateChangesRequestFilterSensitiveLog;
const SubmitAttachmentStateChangesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SubmitAttachmentStateChangesResponseFilterSensitiveLog = SubmitAttachmentStateChangesResponseFilterSensitiveLog;
const SubmitContainerStateChangeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SubmitContainerStateChangeRequestFilterSensitiveLog = SubmitContainerStateChangeRequestFilterSensitiveLog;
const SubmitContainerStateChangeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SubmitContainerStateChangeResponseFilterSensitiveLog = SubmitContainerStateChangeResponseFilterSensitiveLog;
const ContainerStateChangeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ContainerStateChangeFilterSensitiveLog = ContainerStateChangeFilterSensitiveLog;
const ManagedAgentStateChangeFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ManagedAgentStateChangeFilterSensitiveLog = ManagedAgentStateChangeFilterSensitiveLog;
const SubmitTaskStateChangeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SubmitTaskStateChangeRequestFilterSensitiveLog = SubmitTaskStateChangeRequestFilterSensitiveLog;
const SubmitTaskStateChangeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.SubmitTaskStateChangeResponseFilterSensitiveLog = SubmitTaskStateChangeResponseFilterSensitiveLog;
const TagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TagResourceRequestFilterSensitiveLog = TagResourceRequestFilterSensitiveLog;
const TagResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TagResourceResponseFilterSensitiveLog = TagResourceResponseFilterSensitiveLog;
const UntagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UntagResourceRequestFilterSensitiveLog = UntagResourceRequestFilterSensitiveLog;
const UntagResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UntagResourceResponseFilterSensitiveLog = UntagResourceResponseFilterSensitiveLog;
const AutoScalingGroupProviderUpdateFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.AutoScalingGroupProviderUpdateFilterSensitiveLog = AutoScalingGroupProviderUpdateFilterSensitiveLog;
const UpdateCapacityProviderRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateCapacityProviderRequestFilterSensitiveLog = UpdateCapacityProviderRequestFilterSensitiveLog;
const UpdateCapacityProviderResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateCapacityProviderResponseFilterSensitiveLog = UpdateCapacityProviderResponseFilterSensitiveLog;
const UpdateClusterRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateClusterRequestFilterSensitiveLog = UpdateClusterRequestFilterSensitiveLog;
const UpdateClusterResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateClusterResponseFilterSensitiveLog = UpdateClusterResponseFilterSensitiveLog;
const UpdateClusterSettingsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateClusterSettingsRequestFilterSensitiveLog = UpdateClusterSettingsRequestFilterSensitiveLog;
const UpdateClusterSettingsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateClusterSettingsResponseFilterSensitiveLog = UpdateClusterSettingsResponseFilterSensitiveLog;
const UpdateContainerAgentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateContainerAgentRequestFilterSensitiveLog = UpdateContainerAgentRequestFilterSensitiveLog;
const UpdateContainerAgentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateContainerAgentResponseFilterSensitiveLog = UpdateContainerAgentResponseFilterSensitiveLog;
const UpdateContainerInstancesStateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateContainerInstancesStateRequestFilterSensitiveLog = UpdateContainerInstancesStateRequestFilterSensitiveLog;
const UpdateContainerInstancesStateResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateContainerInstancesStateResponseFilterSensitiveLog = UpdateContainerInstancesStateResponseFilterSensitiveLog;
const UpdateServiceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateServiceRequestFilterSensitiveLog = UpdateServiceRequestFilterSensitiveLog;
const UpdateServiceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateServiceResponseFilterSensitiveLog = UpdateServiceResponseFilterSensitiveLog;
const UpdateServicePrimaryTaskSetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateServicePrimaryTaskSetRequestFilterSensitiveLog = UpdateServicePrimaryTaskSetRequestFilterSensitiveLog;
const UpdateServicePrimaryTaskSetResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateServicePrimaryTaskSetResponseFilterSensitiveLog = UpdateServicePrimaryTaskSetResponseFilterSensitiveLog;
const UpdateTaskSetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateTaskSetRequestFilterSensitiveLog = UpdateTaskSetRequestFilterSensitiveLog;
const UpdateTaskSetResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateTaskSetResponseFilterSensitiveLog = UpdateTaskSetResponseFilterSensitiveLog;
