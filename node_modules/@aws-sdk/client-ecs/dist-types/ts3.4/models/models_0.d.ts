import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { ECSServiceException as __BaseException } from "./ECSServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare enum AgentUpdateStatus {
  FAILED = "FAILED",
  PENDING = "PENDING",
  STAGED = "STAGED",
  STAGING = "STAGING",
  UPDATED = "UPDATED",
  UPDATING = "UPDATING",
}
export declare class ClientException extends __BaseException {
  readonly name: "ClientException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ClientException, __BaseException>);
}
export declare enum ManagedScalingStatus {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}
export interface ManagedScaling {
  status?: ManagedScalingStatus | string;
  targetCapacity?: number;
  minimumScalingStepSize?: number;
  maximumScalingStepSize?: number;
  instanceWarmupPeriod?: number;
}
export declare enum ManagedTerminationProtection {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}
export interface AutoScalingGroupProvider {
  autoScalingGroupArn: string | undefined;
  managedScaling?: ManagedScaling;
  managedTerminationProtection?: ManagedTerminationProtection | string;
}
export interface Tag {
  key?: string;
  value?: string;
}
export interface CreateCapacityProviderRequest {
  name: string | undefined;
  autoScalingGroupProvider: AutoScalingGroupProvider | undefined;
  tags?: Tag[];
}
export declare enum CapacityProviderStatus {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
}
export declare enum CapacityProviderUpdateStatus {
  DELETE_COMPLETE = "DELETE_COMPLETE",
  DELETE_FAILED = "DELETE_FAILED",
  DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
  UPDATE_COMPLETE = "UPDATE_COMPLETE",
  UPDATE_FAILED = "UPDATE_FAILED",
  UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
}
export interface CapacityProvider {
  capacityProviderArn?: string;
  name?: string;
  status?: CapacityProviderStatus | string;
  autoScalingGroupProvider?: AutoScalingGroupProvider;
  updateStatus?: CapacityProviderUpdateStatus | string;
  updateStatusReason?: string;
  tags?: Tag[];
}
export interface CreateCapacityProviderResponse {
  capacityProvider?: CapacityProvider;
}
export declare class InvalidParameterException extends __BaseException {
  readonly name: "InvalidParameterException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidParameterException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ServerException extends __BaseException {
  readonly name: "ServerException";
  readonly $fault: "server";
  constructor(opts: __ExceptionOptionType<ServerException, __BaseException>);
}
export declare class UpdateInProgressException extends __BaseException {
  readonly name: "UpdateInProgressException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UpdateInProgressException, __BaseException>
  );
}
export interface ExecuteCommandLogConfiguration {
  cloudWatchLogGroupName?: string;
  cloudWatchEncryptionEnabled?: boolean;
  s3BucketName?: string;
  s3EncryptionEnabled?: boolean;
  s3KeyPrefix?: string;
}
export declare enum ExecuteCommandLogging {
  DEFAULT = "DEFAULT",
  NONE = "NONE",
  OVERRIDE = "OVERRIDE",
}
export interface ExecuteCommandConfiguration {
  kmsKeyId?: string;
  logging?: ExecuteCommandLogging | string;
  logConfiguration?: ExecuteCommandLogConfiguration;
}
export interface ClusterConfiguration {
  executeCommandConfiguration?: ExecuteCommandConfiguration;
}
export interface CapacityProviderStrategyItem {
  capacityProvider: string | undefined;
  weight?: number;
  base?: number;
}
export declare enum ClusterSettingName {
  CONTAINER_INSIGHTS = "containerInsights",
}
export interface ClusterSetting {
  name?: ClusterSettingName | string;
  value?: string;
}
export interface CreateClusterRequest {
  clusterName?: string;
  tags?: Tag[];
  settings?: ClusterSetting[];
  configuration?: ClusterConfiguration;
  capacityProviders?: string[];
  defaultCapacityProviderStrategy?: CapacityProviderStrategyItem[];
}
export interface KeyValuePair {
  name?: string;
  value?: string;
}
export interface Attachment {
  id?: string;
  type?: string;
  status?: string;
  details?: KeyValuePair[];
}
export interface Cluster {
  clusterArn?: string;
  clusterName?: string;
  configuration?: ClusterConfiguration;
  status?: string;
  registeredContainerInstancesCount?: number;
  runningTasksCount?: number;
  pendingTasksCount?: number;
  activeServicesCount?: number;
  statistics?: KeyValuePair[];
  tags?: Tag[];
  settings?: ClusterSetting[];
  capacityProviders?: string[];
  defaultCapacityProviderStrategy?: CapacityProviderStrategyItem[];
  attachments?: Attachment[];
  attachmentsStatus?: string;
}
export interface CreateClusterResponse {
  cluster?: Cluster;
}
export declare class ClusterNotFoundException extends __BaseException {
  readonly name: "ClusterNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ClusterNotFoundException, __BaseException>
  );
}
export interface DeploymentCircuitBreaker {
  enable: boolean | undefined;
  rollback: boolean | undefined;
}
export interface DeploymentConfiguration {
  deploymentCircuitBreaker?: DeploymentCircuitBreaker;
  maximumPercent?: number;
  minimumHealthyPercent?: number;
}
export declare enum DeploymentControllerType {
  CODE_DEPLOY = "CODE_DEPLOY",
  ECS = "ECS",
  EXTERNAL = "EXTERNAL",
}
export interface DeploymentController {
  type: DeploymentControllerType | string | undefined;
}
export declare enum LaunchType {
  EC2 = "EC2",
  EXTERNAL = "EXTERNAL",
  FARGATE = "FARGATE",
}
export interface LoadBalancer {
  targetGroupArn?: string;
  loadBalancerName?: string;
  containerName?: string;
  containerPort?: number;
}
export declare enum AssignPublicIp {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}
export interface AwsVpcConfiguration {
  subnets: string[] | undefined;
  securityGroups?: string[];
  assignPublicIp?: AssignPublicIp | string;
}
export interface NetworkConfiguration {
  awsvpcConfiguration?: AwsVpcConfiguration;
}
export declare enum PlacementConstraintType {
  DISTINCT_INSTANCE = "distinctInstance",
  MEMBER_OF = "memberOf",
}
export interface PlacementConstraint {
  type?: PlacementConstraintType | string;
  expression?: string;
}
export declare enum PlacementStrategyType {
  BINPACK = "binpack",
  RANDOM = "random",
  SPREAD = "spread",
}
export interface PlacementStrategy {
  type?: PlacementStrategyType | string;
  field?: string;
}
export declare enum PropagateTags {
  NONE = "NONE",
  SERVICE = "SERVICE",
  TASK_DEFINITION = "TASK_DEFINITION",
}
export declare enum SchedulingStrategy {
  DAEMON = "DAEMON",
  REPLICA = "REPLICA",
}
export interface ServiceRegistry {
  registryArn?: string;
  port?: number;
  containerName?: string;
  containerPort?: number;
}
export interface CreateServiceRequest {
  cluster?: string;
  serviceName: string | undefined;
  taskDefinition?: string;
  loadBalancers?: LoadBalancer[];
  serviceRegistries?: ServiceRegistry[];
  desiredCount?: number;
  clientToken?: string;
  launchType?: LaunchType | string;
  capacityProviderStrategy?: CapacityProviderStrategyItem[];
  platformVersion?: string;
  role?: string;
  deploymentConfiguration?: DeploymentConfiguration;
  placementConstraints?: PlacementConstraint[];
  placementStrategy?: PlacementStrategy[];
  networkConfiguration?: NetworkConfiguration;
  healthCheckGracePeriodSeconds?: number;
  schedulingStrategy?: SchedulingStrategy | string;
  deploymentController?: DeploymentController;
  tags?: Tag[];
  enableECSManagedTags?: boolean;
  propagateTags?: PropagateTags | string;
  enableExecuteCommand?: boolean;
}
export declare enum DeploymentRolloutState {
  COMPLETED = "COMPLETED",
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
}
export interface Deployment {
  id?: string;
  status?: string;
  taskDefinition?: string;
  desiredCount?: number;
  pendingCount?: number;
  runningCount?: number;
  failedTasks?: number;
  createdAt?: Date;
  updatedAt?: Date;
  capacityProviderStrategy?: CapacityProviderStrategyItem[];
  launchType?: LaunchType | string;
  platformVersion?: string;
  platformFamily?: string;
  networkConfiguration?: NetworkConfiguration;
  rolloutState?: DeploymentRolloutState | string;
  rolloutStateReason?: string;
}
export interface ServiceEvent {
  id?: string;
  createdAt?: Date;
  message?: string;
}
export declare enum ScaleUnit {
  PERCENT = "PERCENT",
}
export interface Scale {
  value?: number;
  unit?: ScaleUnit | string;
}
export declare enum StabilityStatus {
  STABILIZING = "STABILIZING",
  STEADY_STATE = "STEADY_STATE",
}
export interface TaskSet {
  id?: string;
  taskSetArn?: string;
  serviceArn?: string;
  clusterArn?: string;
  startedBy?: string;
  externalId?: string;
  status?: string;
  taskDefinition?: string;
  computedDesiredCount?: number;
  pendingCount?: number;
  runningCount?: number;
  createdAt?: Date;
  updatedAt?: Date;
  launchType?: LaunchType | string;
  capacityProviderStrategy?: CapacityProviderStrategyItem[];
  platformVersion?: string;
  platformFamily?: string;
  networkConfiguration?: NetworkConfiguration;
  loadBalancers?: LoadBalancer[];
  serviceRegistries?: ServiceRegistry[];
  scale?: Scale;
  stabilityStatus?: StabilityStatus | string;
  stabilityStatusAt?: Date;
  tags?: Tag[];
}
export interface Service {
  serviceArn?: string;
  serviceName?: string;
  clusterArn?: string;
  loadBalancers?: LoadBalancer[];
  serviceRegistries?: ServiceRegistry[];
  status?: string;
  desiredCount?: number;
  runningCount?: number;
  pendingCount?: number;
  launchType?: LaunchType | string;
  capacityProviderStrategy?: CapacityProviderStrategyItem[];
  platformVersion?: string;
  platformFamily?: string;
  taskDefinition?: string;
  deploymentConfiguration?: DeploymentConfiguration;
  taskSets?: TaskSet[];
  deployments?: Deployment[];
  roleArn?: string;
  events?: ServiceEvent[];
  createdAt?: Date;
  placementConstraints?: PlacementConstraint[];
  placementStrategy?: PlacementStrategy[];
  networkConfiguration?: NetworkConfiguration;
  healthCheckGracePeriodSeconds?: number;
  schedulingStrategy?: SchedulingStrategy | string;
  deploymentController?: DeploymentController;
  tags?: Tag[];
  createdBy?: string;
  enableECSManagedTags?: boolean;
  propagateTags?: PropagateTags | string;
  enableExecuteCommand?: boolean;
}
export interface CreateServiceResponse {
  service?: Service;
}
export declare class PlatformTaskDefinitionIncompatibilityException extends __BaseException {
  readonly name: "PlatformTaskDefinitionIncompatibilityException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      PlatformTaskDefinitionIncompatibilityException,
      __BaseException
    >
  );
}
export declare class PlatformUnknownException extends __BaseException {
  readonly name: "PlatformUnknownException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<PlatformUnknownException, __BaseException>
  );
}
export declare class UnsupportedFeatureException extends __BaseException {
  readonly name: "UnsupportedFeatureException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnsupportedFeatureException, __BaseException>
  );
}
export interface CreateTaskSetRequest {
  service: string | undefined;
  cluster: string | undefined;
  externalId?: string;
  taskDefinition: string | undefined;
  networkConfiguration?: NetworkConfiguration;
  loadBalancers?: LoadBalancer[];
  serviceRegistries?: ServiceRegistry[];
  launchType?: LaunchType | string;
  capacityProviderStrategy?: CapacityProviderStrategyItem[];
  platformVersion?: string;
  scale?: Scale;
  clientToken?: string;
  tags?: Tag[];
}
export interface CreateTaskSetResponse {
  taskSet?: TaskSet;
}
export declare class ServiceNotActiveException extends __BaseException {
  readonly name: "ServiceNotActiveException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceNotActiveException, __BaseException>
  );
}
export declare class ServiceNotFoundException extends __BaseException {
  readonly name: "ServiceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceNotFoundException, __BaseException>
  );
}
export declare enum SettingName {
  AWSVPC_TRUNKING = "awsvpcTrunking",
  CONTAINER_INSIGHTS = "containerInsights",
  CONTAINER_INSTANCE_LONG_ARN_FORMAT = "containerInstanceLongArnFormat",
  SERVICE_LONG_ARN_FORMAT = "serviceLongArnFormat",
  TASK_LONG_ARN_FORMAT = "taskLongArnFormat",
}
export interface DeleteAccountSettingRequest {
  name: SettingName | string | undefined;
  principalArn?: string;
}
export interface Setting {
  name?: SettingName | string;
  value?: string;
  principalArn?: string;
}
export interface DeleteAccountSettingResponse {
  setting?: Setting;
}
export declare enum TargetType {
  CONTAINER_INSTANCE = "container-instance",
}
export interface Attribute {
  name: string | undefined;
  value?: string;
  targetType?: TargetType | string;
  targetId?: string;
}
export interface DeleteAttributesRequest {
  cluster?: string;
  attributes: Attribute[] | undefined;
}
export interface DeleteAttributesResponse {
  attributes?: Attribute[];
}
export declare class TargetNotFoundException extends __BaseException {
  readonly name: "TargetNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TargetNotFoundException, __BaseException>
  );
}
export interface DeleteCapacityProviderRequest {
  capacityProvider: string | undefined;
}
export interface DeleteCapacityProviderResponse {
  capacityProvider?: CapacityProvider;
}
export declare class ClusterContainsContainerInstancesException extends __BaseException {
  readonly name: "ClusterContainsContainerInstancesException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ClusterContainsContainerInstancesException,
      __BaseException
    >
  );
}
export declare class ClusterContainsServicesException extends __BaseException {
  readonly name: "ClusterContainsServicesException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      ClusterContainsServicesException,
      __BaseException
    >
  );
}
export declare class ClusterContainsTasksException extends __BaseException {
  readonly name: "ClusterContainsTasksException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ClusterContainsTasksException, __BaseException>
  );
}
export interface DeleteClusterRequest {
  cluster: string | undefined;
}
export interface DeleteClusterResponse {
  cluster?: Cluster;
}
export interface DeleteServiceRequest {
  cluster?: string;
  service: string | undefined;
  force?: boolean;
}
export interface DeleteServiceResponse {
  service?: Service;
}
export interface DeleteTaskSetRequest {
  cluster: string | undefined;
  service: string | undefined;
  taskSet: string | undefined;
  force?: boolean;
}
export interface DeleteTaskSetResponse {
  taskSet?: TaskSet;
}
export declare class TaskSetNotFoundException extends __BaseException {
  readonly name: "TaskSetNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TaskSetNotFoundException, __BaseException>
  );
}
export interface DeregisterContainerInstanceRequest {
  cluster?: string;
  containerInstance: string | undefined;
  force?: boolean;
}
export declare enum InstanceHealthCheckState {
  IMPAIRED = "IMPAIRED",
  INITIALIZING = "INITIALIZING",
  INSUFFICIENT_DATA = "INSUFFICIENT_DATA",
  OK = "OK",
}
export declare enum InstanceHealthCheckType {
  CONTAINER_RUNTIME = "CONTAINER_RUNTIME",
}
export interface InstanceHealthCheckResult {
  type?: InstanceHealthCheckType | string;
  status?: InstanceHealthCheckState | string;
  lastUpdated?: Date;
  lastStatusChange?: Date;
}
export interface ContainerInstanceHealthStatus {
  overallStatus?: InstanceHealthCheckState | string;
  details?: InstanceHealthCheckResult[];
}
export interface Resource {
  name?: string;
  type?: string;
  doubleValue?: number;
  longValue?: number;
  integerValue?: number;
  stringSetValue?: string[];
}
export interface VersionInfo {
  agentVersion?: string;
  agentHash?: string;
  dockerVersion?: string;
}
export interface ContainerInstance {
  containerInstanceArn?: string;
  ec2InstanceId?: string;
  capacityProviderName?: string;
  version?: number;
  versionInfo?: VersionInfo;
  remainingResources?: Resource[];
  registeredResources?: Resource[];
  status?: string;
  statusReason?: string;
  agentConnected?: boolean;
  runningTasksCount?: number;
  pendingTasksCount?: number;
  agentUpdateStatus?: AgentUpdateStatus | string;
  attributes?: Attribute[];
  registeredAt?: Date;
  attachments?: Attachment[];
  tags?: Tag[];
  healthStatus?: ContainerInstanceHealthStatus;
}
export interface DeregisterContainerInstanceResponse {
  containerInstance?: ContainerInstance;
}
export interface DeregisterTaskDefinitionRequest {
  taskDefinition: string | undefined;
}
export declare enum Compatibility {
  EC2 = "EC2",
  EXTERNAL = "EXTERNAL",
  FARGATE = "FARGATE",
}
export declare enum ContainerCondition {
  COMPLETE = "COMPLETE",
  HEALTHY = "HEALTHY",
  START = "START",
  SUCCESS = "SUCCESS",
}
export interface ContainerDependency {
  containerName: string | undefined;
  condition: ContainerCondition | string | undefined;
}
export declare enum EnvironmentFileType {
  S3 = "s3",
}
export interface EnvironmentFile {
  value: string | undefined;
  type: EnvironmentFileType | string | undefined;
}
export interface HostEntry {
  hostname: string | undefined;
  ipAddress: string | undefined;
}
export declare enum FirelensConfigurationType {
  FLUENTBIT = "fluentbit",
  FLUENTD = "fluentd",
}
export interface FirelensConfiguration {
  type: FirelensConfigurationType | string | undefined;
  options?: Record<string, string>;
}
export interface HealthCheck {
  command: string[] | undefined;
  interval?: number;
  timeout?: number;
  retries?: number;
  startPeriod?: number;
}
export interface KernelCapabilities {
  add?: string[];
  drop?: string[];
}
export declare enum DeviceCgroupPermission {
  MKNOD = "mknod",
  READ = "read",
  WRITE = "write",
}
export interface Device {
  hostPath: string | undefined;
  containerPath?: string;
  permissions?: (DeviceCgroupPermission | string)[];
}
export interface Tmpfs {
  containerPath: string | undefined;
  size: number | undefined;
  mountOptions?: string[];
}
export interface LinuxParameters {
  capabilities?: KernelCapabilities;
  devices?: Device[];
  initProcessEnabled?: boolean;
  sharedMemorySize?: number;
  tmpfs?: Tmpfs[];
  maxSwap?: number;
  swappiness?: number;
}
export declare enum LogDriver {
  AWSFIRELENS = "awsfirelens",
  AWSLOGS = "awslogs",
  FLUENTD = "fluentd",
  GELF = "gelf",
  JOURNALD = "journald",
  JSON_FILE = "json-file",
  SPLUNK = "splunk",
  SYSLOG = "syslog",
}
export interface Secret {
  name: string | undefined;
  valueFrom: string | undefined;
}
export interface LogConfiguration {
  logDriver: LogDriver | string | undefined;
  options?: Record<string, string>;
  secretOptions?: Secret[];
}
export interface MountPoint {
  sourceVolume?: string;
  containerPath?: string;
  readOnly?: boolean;
}
export declare enum TransportProtocol {
  TCP = "tcp",
  UDP = "udp",
}
export interface PortMapping {
  containerPort?: number;
  hostPort?: number;
  protocol?: TransportProtocol | string;
}
export interface RepositoryCredentials {
  credentialsParameter: string | undefined;
}
export declare enum ResourceType {
  GPU = "GPU",
  INFERENCE_ACCELERATOR = "InferenceAccelerator",
}
export interface ResourceRequirement {
  value: string | undefined;
  type: ResourceType | string | undefined;
}
export interface SystemControl {
  namespace?: string;
  value?: string;
}
export declare enum UlimitName {
  CORE = "core",
  CPU = "cpu",
  DATA = "data",
  FSIZE = "fsize",
  LOCKS = "locks",
  MEMLOCK = "memlock",
  MSGQUEUE = "msgqueue",
  NICE = "nice",
  NOFILE = "nofile",
  NPROC = "nproc",
  RSS = "rss",
  RTPRIO = "rtprio",
  RTTIME = "rttime",
  SIGPENDING = "sigpending",
  STACK = "stack",
}
export interface Ulimit {
  name: UlimitName | string | undefined;
  softLimit: number | undefined;
  hardLimit: number | undefined;
}
export interface VolumeFrom {
  sourceContainer?: string;
  readOnly?: boolean;
}
export interface ContainerDefinition {
  name?: string;
  image?: string;
  repositoryCredentials?: RepositoryCredentials;
  cpu?: number;
  memory?: number;
  memoryReservation?: number;
  links?: string[];
  portMappings?: PortMapping[];
  essential?: boolean;
  entryPoint?: string[];
  command?: string[];
  environment?: KeyValuePair[];
  environmentFiles?: EnvironmentFile[];
  mountPoints?: MountPoint[];
  volumesFrom?: VolumeFrom[];
  linuxParameters?: LinuxParameters;
  secrets?: Secret[];
  dependsOn?: ContainerDependency[];
  startTimeout?: number;
  stopTimeout?: number;
  hostname?: string;
  user?: string;
  workingDirectory?: string;
  disableNetworking?: boolean;
  privileged?: boolean;
  readonlyRootFilesystem?: boolean;
  dnsServers?: string[];
  dnsSearchDomains?: string[];
  extraHosts?: HostEntry[];
  dockerSecurityOptions?: string[];
  interactive?: boolean;
  pseudoTerminal?: boolean;
  dockerLabels?: Record<string, string>;
  ulimits?: Ulimit[];
  logConfiguration?: LogConfiguration;
  healthCheck?: HealthCheck;
  systemControls?: SystemControl[];
  resourceRequirements?: ResourceRequirement[];
  firelensConfiguration?: FirelensConfiguration;
}
export interface EphemeralStorage {
  sizeInGiB: number | undefined;
}
export interface InferenceAccelerator {
  deviceName: string | undefined;
  deviceType: string | undefined;
}
export declare enum IpcMode {
  HOST = "host",
  NONE = "none",
  TASK = "task",
}
export declare enum NetworkMode {
  AWSVPC = "awsvpc",
  BRIDGE = "bridge",
  HOST = "host",
  NONE = "none",
}
export declare enum PidMode {
  HOST = "host",
  TASK = "task",
}
export declare enum TaskDefinitionPlacementConstraintType {
  MEMBER_OF = "memberOf",
}
export interface TaskDefinitionPlacementConstraint {
  type?: TaskDefinitionPlacementConstraintType | string;
  expression?: string;
}
export declare enum ProxyConfigurationType {
  APPMESH = "APPMESH",
}
export interface ProxyConfiguration {
  type?: ProxyConfigurationType | string;
  containerName: string | undefined;
  properties?: KeyValuePair[];
}
export declare enum CPUArchitecture {
  ARM64 = "ARM64",
  X86_64 = "X86_64",
}
export declare enum OSFamily {
  LINUX = "LINUX",
  WINDOWS_SERVER_2004_CORE = "WINDOWS_SERVER_2004_CORE",
  WINDOWS_SERVER_2016_FULL = "WINDOWS_SERVER_2016_FULL",
  WINDOWS_SERVER_2019_CORE = "WINDOWS_SERVER_2019_CORE",
  WINDOWS_SERVER_2019_FULL = "WINDOWS_SERVER_2019_FULL",
  WINDOWS_SERVER_2022_CORE = "WINDOWS_SERVER_2022_CORE",
  WINDOWS_SERVER_2022_FULL = "WINDOWS_SERVER_2022_FULL",
  WINDOWS_SERVER_20H2_CORE = "WINDOWS_SERVER_20H2_CORE",
}
export interface RuntimePlatform {
  cpuArchitecture?: CPUArchitecture | string;
  operatingSystemFamily?: OSFamily | string;
}
export declare enum TaskDefinitionStatus {
  ACTIVE = "ACTIVE",
  INACTIVE = "INACTIVE",
}
export declare enum Scope {
  SHARED = "shared",
  TASK = "task",
}
export interface DockerVolumeConfiguration {
  scope?: Scope | string;
  autoprovision?: boolean;
  driver?: string;
  driverOpts?: Record<string, string>;
  labels?: Record<string, string>;
}
export declare enum EFSAuthorizationConfigIAM {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}
export interface EFSAuthorizationConfig {
  accessPointId?: string;
  iam?: EFSAuthorizationConfigIAM | string;
}
export declare enum EFSTransitEncryption {
  DISABLED = "DISABLED",
  ENABLED = "ENABLED",
}
export interface EFSVolumeConfiguration {
  fileSystemId: string | undefined;
  rootDirectory?: string;
  transitEncryption?: EFSTransitEncryption | string;
  transitEncryptionPort?: number;
  authorizationConfig?: EFSAuthorizationConfig;
}
export interface FSxWindowsFileServerAuthorizationConfig {
  credentialsParameter: string | undefined;
  domain: string | undefined;
}
export interface FSxWindowsFileServerVolumeConfiguration {
  fileSystemId: string | undefined;
  rootDirectory: string | undefined;
  authorizationConfig: FSxWindowsFileServerAuthorizationConfig | undefined;
}
export interface HostVolumeProperties {
  sourcePath?: string;
}
export interface Volume {
  name?: string;
  host?: HostVolumeProperties;
  dockerVolumeConfiguration?: DockerVolumeConfiguration;
  efsVolumeConfiguration?: EFSVolumeConfiguration;
  fsxWindowsFileServerVolumeConfiguration?: FSxWindowsFileServerVolumeConfiguration;
}
export interface TaskDefinition {
  taskDefinitionArn?: string;
  containerDefinitions?: ContainerDefinition[];
  family?: string;
  taskRoleArn?: string;
  executionRoleArn?: string;
  networkMode?: NetworkMode | string;
  revision?: number;
  volumes?: Volume[];
  status?: TaskDefinitionStatus | string;
  requiresAttributes?: Attribute[];
  placementConstraints?: TaskDefinitionPlacementConstraint[];
  compatibilities?: (Compatibility | string)[];
  runtimePlatform?: RuntimePlatform;
  requiresCompatibilities?: (Compatibility | string)[];
  cpu?: string;
  memory?: string;
  inferenceAccelerators?: InferenceAccelerator[];
  pidMode?: PidMode | string;
  ipcMode?: IpcMode | string;
  proxyConfiguration?: ProxyConfiguration;
  registeredAt?: Date;
  deregisteredAt?: Date;
  registeredBy?: string;
  ephemeralStorage?: EphemeralStorage;
}
export interface DeregisterTaskDefinitionResponse {
  taskDefinition?: TaskDefinition;
}
export declare enum CapacityProviderField {
  TAGS = "TAGS",
}
export interface DescribeCapacityProvidersRequest {
  capacityProviders?: string[];
  include?: (CapacityProviderField | string)[];
  maxResults?: number;
  nextToken?: string;
}
export interface Failure {
  arn?: string;
  reason?: string;
  detail?: string;
}
export interface DescribeCapacityProvidersResponse {
  capacityProviders?: CapacityProvider[];
  failures?: Failure[];
  nextToken?: string;
}
export declare enum ClusterField {
  ATTACHMENTS = "ATTACHMENTS",
  CONFIGURATIONS = "CONFIGURATIONS",
  SETTINGS = "SETTINGS",
  STATISTICS = "STATISTICS",
  TAGS = "TAGS",
}
export interface DescribeClustersRequest {
  clusters?: string[];
  include?: (ClusterField | string)[];
}
export interface DescribeClustersResponse {
  clusters?: Cluster[];
  failures?: Failure[];
}
export declare enum ContainerInstanceField {
  CONTAINER_INSTANCE_HEALTH = "CONTAINER_INSTANCE_HEALTH",
  TAGS = "TAGS",
}
export interface DescribeContainerInstancesRequest {
  cluster?: string;
  containerInstances: string[] | undefined;
  include?: (ContainerInstanceField | string)[];
}
export interface DescribeContainerInstancesResponse {
  containerInstances?: ContainerInstance[];
  failures?: Failure[];
}
export declare enum ServiceField {
  TAGS = "TAGS",
}
export interface DescribeServicesRequest {
  cluster?: string;
  services: string[] | undefined;
  include?: (ServiceField | string)[];
}
export interface DescribeServicesResponse {
  services?: Service[];
  failures?: Failure[];
}
export declare enum TaskDefinitionField {
  TAGS = "TAGS",
}
export interface DescribeTaskDefinitionRequest {
  taskDefinition: string | undefined;
  include?: (TaskDefinitionField | string)[];
}
export interface DescribeTaskDefinitionResponse {
  taskDefinition?: TaskDefinition;
  tags?: Tag[];
}
export declare enum TaskField {
  TAGS = "TAGS",
}
export interface DescribeTasksRequest {
  cluster?: string;
  tasks: string[] | undefined;
  include?: (TaskField | string)[];
}
export declare enum Connectivity {
  CONNECTED = "CONNECTED",
  DISCONNECTED = "DISCONNECTED",
}
export declare enum HealthStatus {
  HEALTHY = "HEALTHY",
  UNHEALTHY = "UNHEALTHY",
  UNKNOWN = "UNKNOWN",
}
export declare enum ManagedAgentName {
  ExecuteCommandAgent = "ExecuteCommandAgent",
}
export interface ManagedAgent {
  lastStartedAt?: Date;
  name?: ManagedAgentName | string;
  reason?: string;
  lastStatus?: string;
}
export interface NetworkBinding {
  bindIP?: string;
  containerPort?: number;
  hostPort?: number;
  protocol?: TransportProtocol | string;
}
export interface NetworkInterface {
  attachmentId?: string;
  privateIpv4Address?: string;
  ipv6Address?: string;
}
export interface Container {
  containerArn?: string;
  taskArn?: string;
  name?: string;
  image?: string;
  imageDigest?: string;
  runtimeId?: string;
  lastStatus?: string;
  exitCode?: number;
  reason?: string;
  networkBindings?: NetworkBinding[];
  networkInterfaces?: NetworkInterface[];
  healthStatus?: HealthStatus | string;
  managedAgents?: ManagedAgent[];
  cpu?: string;
  memory?: string;
  memoryReservation?: string;
  gpuIds?: string[];
}
export interface ContainerOverride {
  name?: string;
  command?: string[];
  environment?: KeyValuePair[];
  environmentFiles?: EnvironmentFile[];
  cpu?: number;
  memory?: number;
  memoryReservation?: number;
  resourceRequirements?: ResourceRequirement[];
}
export interface InferenceAcceleratorOverride {
  deviceName?: string;
  deviceType?: string;
}
export interface TaskOverride {
  containerOverrides?: ContainerOverride[];
  cpu?: string;
  inferenceAcceleratorOverrides?: InferenceAcceleratorOverride[];
  executionRoleArn?: string;
  memory?: string;
  taskRoleArn?: string;
  ephemeralStorage?: EphemeralStorage;
}
export declare enum TaskStopCode {
  ESSENTIAL_CONTAINER_EXITED = "EssentialContainerExited",
  TASK_FAILED_TO_START = "TaskFailedToStart",
  USER_INITIATED = "UserInitiated",
}
export interface Task {
  attachments?: Attachment[];
  attributes?: Attribute[];
  availabilityZone?: string;
  capacityProviderName?: string;
  clusterArn?: string;
  connectivity?: Connectivity | string;
  connectivityAt?: Date;
  containerInstanceArn?: string;
  containers?: Container[];
  cpu?: string;
  createdAt?: Date;
  desiredStatus?: string;
  enableExecuteCommand?: boolean;
  executionStoppedAt?: Date;
  group?: string;
  healthStatus?: HealthStatus | string;
  inferenceAccelerators?: InferenceAccelerator[];
  lastStatus?: string;
  launchType?: LaunchType | string;
  memory?: string;
  overrides?: TaskOverride;
  platformVersion?: string;
  platformFamily?: string;
  pullStartedAt?: Date;
  pullStoppedAt?: Date;
  startedAt?: Date;
  startedBy?: string;
  stopCode?: TaskStopCode | string;
  stoppedAt?: Date;
  stoppedReason?: string;
  stoppingAt?: Date;
  tags?: Tag[];
  taskArn?: string;
  taskDefinitionArn?: string;
  version?: number;
  ephemeralStorage?: EphemeralStorage;
}
export interface DescribeTasksResponse {
  tasks?: Task[];
  failures?: Failure[];
}
export declare enum TaskSetField {
  TAGS = "TAGS",
}
export interface DescribeTaskSetsRequest {
  cluster: string | undefined;
  service: string | undefined;
  taskSets?: string[];
  include?: (TaskSetField | string)[];
}
export interface DescribeTaskSetsResponse {
  taskSets?: TaskSet[];
  failures?: Failure[];
}
export interface DiscoverPollEndpointRequest {
  containerInstance?: string;
  cluster?: string;
}
export interface DiscoverPollEndpointResponse {
  endpoint?: string;
  telemetryEndpoint?: string;
}
export interface ExecuteCommandRequest {
  cluster?: string;
  container?: string;
  command: string | undefined;
  interactive: boolean | undefined;
  task: string | undefined;
}
export interface Session {
  sessionId?: string;
  streamUrl?: string;
  tokenValue?: string;
}
export interface ExecuteCommandResponse {
  clusterArn?: string;
  containerArn?: string;
  containerName?: string;
  interactive?: boolean;
  session?: Session;
  taskArn?: string;
}
export declare class TargetNotConnectedException extends __BaseException {
  readonly name: "TargetNotConnectedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<TargetNotConnectedException, __BaseException>
  );
}
export interface ListAccountSettingsRequest {
  name?: SettingName | string;
  value?: string;
  principalArn?: string;
  effectiveSettings?: boolean;
  nextToken?: string;
  maxResults?: number;
}
export interface ListAccountSettingsResponse {
  settings?: Setting[];
  nextToken?: string;
}
export interface ListAttributesRequest {
  cluster?: string;
  targetType: TargetType | string | undefined;
  attributeName?: string;
  attributeValue?: string;
  nextToken?: string;
  maxResults?: number;
}
export interface ListAttributesResponse {
  attributes?: Attribute[];
  nextToken?: string;
}
export interface ListClustersRequest {
  nextToken?: string;
  maxResults?: number;
}
export interface ListClustersResponse {
  clusterArns?: string[];
  nextToken?: string;
}
export declare enum ContainerInstanceStatus {
  ACTIVE = "ACTIVE",
  DEREGISTERING = "DEREGISTERING",
  DRAINING = "DRAINING",
  REGISTERING = "REGISTERING",
  REGISTRATION_FAILED = "REGISTRATION_FAILED",
}
export interface ListContainerInstancesRequest {
  cluster?: string;
  filter?: string;
  nextToken?: string;
  maxResults?: number;
  status?: ContainerInstanceStatus | string;
}
export interface ListContainerInstancesResponse {
  containerInstanceArns?: string[];
  nextToken?: string;
}
export interface ListServicesRequest {
  cluster?: string;
  nextToken?: string;
  maxResults?: number;
  launchType?: LaunchType | string;
  schedulingStrategy?: SchedulingStrategy | string;
}
export interface ListServicesResponse {
  serviceArns?: string[];
  nextToken?: string;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Tag[];
}
export declare enum TaskDefinitionFamilyStatus {
  ACTIVE = "ACTIVE",
  ALL = "ALL",
  INACTIVE = "INACTIVE",
}
export interface ListTaskDefinitionFamiliesRequest {
  familyPrefix?: string;
  status?: TaskDefinitionFamilyStatus | string;
  nextToken?: string;
  maxResults?: number;
}
export interface ListTaskDefinitionFamiliesResponse {
  families?: string[];
  nextToken?: string;
}
export declare enum SortOrder {
  ASC = "ASC",
  DESC = "DESC",
}
export interface ListTaskDefinitionsRequest {
  familyPrefix?: string;
  status?: TaskDefinitionStatus | string;
  sort?: SortOrder | string;
  nextToken?: string;
  maxResults?: number;
}
export interface ListTaskDefinitionsResponse {
  taskDefinitionArns?: string[];
  nextToken?: string;
}
export declare enum DesiredStatus {
  PENDING = "PENDING",
  RUNNING = "RUNNING",
  STOPPED = "STOPPED",
}
export interface ListTasksRequest {
  cluster?: string;
  containerInstance?: string;
  family?: string;
  nextToken?: string;
  maxResults?: number;
  startedBy?: string;
  serviceName?: string;
  desiredStatus?: DesiredStatus | string;
  launchType?: LaunchType | string;
}
export interface ListTasksResponse {
  taskArns?: string[];
  nextToken?: string;
}
export interface PutAccountSettingRequest {
  name: SettingName | string | undefined;
  value: string | undefined;
  principalArn?: string;
}
export interface PutAccountSettingResponse {
  setting?: Setting;
}
export interface PutAccountSettingDefaultRequest {
  name: SettingName | string | undefined;
  value: string | undefined;
}
export interface PutAccountSettingDefaultResponse {
  setting?: Setting;
}
export declare class AttributeLimitExceededException extends __BaseException {
  readonly name: "AttributeLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      AttributeLimitExceededException,
      __BaseException
    >
  );
}
export interface PutAttributesRequest {
  cluster?: string;
  attributes: Attribute[] | undefined;
}
export interface PutAttributesResponse {
  attributes?: Attribute[];
}
export interface PutClusterCapacityProvidersRequest {
  cluster: string | undefined;
  capacityProviders: string[] | undefined;
  defaultCapacityProviderStrategy: CapacityProviderStrategyItem[] | undefined;
}
export interface PutClusterCapacityProvidersResponse {
  cluster?: Cluster;
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare enum PlatformDeviceType {
  GPU = "GPU",
}
export interface PlatformDevice {
  id: string | undefined;
  type: PlatformDeviceType | string | undefined;
}
export interface RegisterContainerInstanceRequest {
  cluster?: string;
  instanceIdentityDocument?: string;
  instanceIdentityDocumentSignature?: string;
  totalResources?: Resource[];
  versionInfo?: VersionInfo;
  containerInstanceArn?: string;
  attributes?: Attribute[];
  platformDevices?: PlatformDevice[];
  tags?: Tag[];
}
export interface RegisterContainerInstanceResponse {
  containerInstance?: ContainerInstance;
}
export interface RegisterTaskDefinitionRequest {
  family: string | undefined;
  taskRoleArn?: string;
  executionRoleArn?: string;
  networkMode?: NetworkMode | string;
  containerDefinitions: ContainerDefinition[] | undefined;
  volumes?: Volume[];
  placementConstraints?: TaskDefinitionPlacementConstraint[];
  requiresCompatibilities?: (Compatibility | string)[];
  cpu?: string;
  memory?: string;
  tags?: Tag[];
  pidMode?: PidMode | string;
  ipcMode?: IpcMode | string;
  proxyConfiguration?: ProxyConfiguration;
  inferenceAccelerators?: InferenceAccelerator[];
  ephemeralStorage?: EphemeralStorage;
  runtimePlatform?: RuntimePlatform;
}
export interface RegisterTaskDefinitionResponse {
  taskDefinition?: TaskDefinition;
  tags?: Tag[];
}
export declare class BlockedException extends __BaseException {
  readonly name: "BlockedException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<BlockedException, __BaseException>);
}
export interface RunTaskRequest {
  capacityProviderStrategy?: CapacityProviderStrategyItem[];
  cluster?: string;
  count?: number;
  enableECSManagedTags?: boolean;
  enableExecuteCommand?: boolean;
  group?: string;
  launchType?: LaunchType | string;
  networkConfiguration?: NetworkConfiguration;
  overrides?: TaskOverride;
  placementConstraints?: PlacementConstraint[];
  placementStrategy?: PlacementStrategy[];
  platformVersion?: string;
  propagateTags?: PropagateTags | string;
  referenceId?: string;
  startedBy?: string;
  tags?: Tag[];
  taskDefinition: string | undefined;
}
export interface RunTaskResponse {
  tasks?: Task[];
  failures?: Failure[];
}
export interface StartTaskRequest {
  cluster?: string;
  containerInstances: string[] | undefined;
  enableECSManagedTags?: boolean;
  enableExecuteCommand?: boolean;
  group?: string;
  networkConfiguration?: NetworkConfiguration;
  overrides?: TaskOverride;
  propagateTags?: PropagateTags | string;
  referenceId?: string;
  startedBy?: string;
  tags?: Tag[];
  taskDefinition: string | undefined;
}
export interface StartTaskResponse {
  tasks?: Task[];
  failures?: Failure[];
}
export interface StopTaskRequest {
  cluster?: string;
  task: string | undefined;
  reason?: string;
}
export interface StopTaskResponse {
  task?: Task;
}
export interface AttachmentStateChange {
  attachmentArn: string | undefined;
  status: string | undefined;
}
export interface SubmitAttachmentStateChangesRequest {
  cluster?: string;
  attachments: AttachmentStateChange[] | undefined;
}
export interface SubmitAttachmentStateChangesResponse {
  acknowledgment?: string;
}
export interface SubmitContainerStateChangeRequest {
  cluster?: string;
  task?: string;
  containerName?: string;
  runtimeId?: string;
  status?: string;
  exitCode?: number;
  reason?: string;
  networkBindings?: NetworkBinding[];
}
export interface SubmitContainerStateChangeResponse {
  acknowledgment?: string;
}
export interface ContainerStateChange {
  containerName?: string;
  imageDigest?: string;
  runtimeId?: string;
  exitCode?: number;
  networkBindings?: NetworkBinding[];
  reason?: string;
  status?: string;
}
export interface ManagedAgentStateChange {
  containerName: string | undefined;
  managedAgentName: ManagedAgentName | string | undefined;
  status: string | undefined;
  reason?: string;
}
export interface SubmitTaskStateChangeRequest {
  cluster?: string;
  task?: string;
  status?: string;
  reason?: string;
  containers?: ContainerStateChange[];
  attachments?: AttachmentStateChange[];
  managedAgents?: ManagedAgentStateChange[];
  pullStartedAt?: Date;
  pullStoppedAt?: Date;
  executionStoppedAt?: Date;
}
export interface SubmitTaskStateChangeResponse {
  acknowledgment?: string;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Tag[] | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface AutoScalingGroupProviderUpdate {
  managedScaling?: ManagedScaling;
  managedTerminationProtection?: ManagedTerminationProtection | string;
}
export interface UpdateCapacityProviderRequest {
  name: string | undefined;
  autoScalingGroupProvider: AutoScalingGroupProviderUpdate | undefined;
}
export interface UpdateCapacityProviderResponse {
  capacityProvider?: CapacityProvider;
}
export interface UpdateClusterRequest {
  cluster: string | undefined;
  settings?: ClusterSetting[];
  configuration?: ClusterConfiguration;
}
export interface UpdateClusterResponse {
  cluster?: Cluster;
}
export interface UpdateClusterSettingsRequest {
  cluster: string | undefined;
  settings: ClusterSetting[] | undefined;
}
export interface UpdateClusterSettingsResponse {
  cluster?: Cluster;
}
export declare class MissingVersionException extends __BaseException {
  readonly name: "MissingVersionException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<MissingVersionException, __BaseException>
  );
}
export declare class NoUpdateAvailableException extends __BaseException {
  readonly name: "NoUpdateAvailableException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<NoUpdateAvailableException, __BaseException>
  );
}
export interface UpdateContainerAgentRequest {
  cluster?: string;
  containerInstance: string | undefined;
}
export interface UpdateContainerAgentResponse {
  containerInstance?: ContainerInstance;
}
export interface UpdateContainerInstancesStateRequest {
  cluster?: string;
  containerInstances: string[] | undefined;
  status: ContainerInstanceStatus | string | undefined;
}
export interface UpdateContainerInstancesStateResponse {
  containerInstances?: ContainerInstance[];
  failures?: Failure[];
}
export interface UpdateServiceRequest {
  cluster?: string;
  service: string | undefined;
  desiredCount?: number;
  taskDefinition?: string;
  capacityProviderStrategy?: CapacityProviderStrategyItem[];
  deploymentConfiguration?: DeploymentConfiguration;
  networkConfiguration?: NetworkConfiguration;
  placementConstraints?: PlacementConstraint[];
  placementStrategy?: PlacementStrategy[];
  platformVersion?: string;
  forceNewDeployment?: boolean;
  healthCheckGracePeriodSeconds?: number;
  enableExecuteCommand?: boolean;
  enableECSManagedTags?: boolean;
  loadBalancers?: LoadBalancer[];
  propagateTags?: PropagateTags | string;
  serviceRegistries?: ServiceRegistry[];
}
export interface UpdateServiceResponse {
  service?: Service;
}
export interface UpdateServicePrimaryTaskSetRequest {
  cluster: string | undefined;
  service: string | undefined;
  primaryTaskSet: string | undefined;
}
export interface UpdateServicePrimaryTaskSetResponse {
  taskSet?: TaskSet;
}
export interface UpdateTaskSetRequest {
  cluster: string | undefined;
  service: string | undefined;
  taskSet: string | undefined;
  scale: Scale | undefined;
}
export interface UpdateTaskSetResponse {
  taskSet?: TaskSet;
}
export declare const ManagedScalingFilterSensitiveLog: (
  obj: ManagedScaling
) => any;
export declare const AutoScalingGroupProviderFilterSensitiveLog: (
  obj: AutoScalingGroupProvider
) => any;
export declare const TagFilterSensitiveLog: (obj: Tag) => any;
export declare const CreateCapacityProviderRequestFilterSensitiveLog: (
  obj: CreateCapacityProviderRequest
) => any;
export declare const CapacityProviderFilterSensitiveLog: (
  obj: CapacityProvider
) => any;
export declare const CreateCapacityProviderResponseFilterSensitiveLog: (
  obj: CreateCapacityProviderResponse
) => any;
export declare const ExecuteCommandLogConfigurationFilterSensitiveLog: (
  obj: ExecuteCommandLogConfiguration
) => any;
export declare const ExecuteCommandConfigurationFilterSensitiveLog: (
  obj: ExecuteCommandConfiguration
) => any;
export declare const ClusterConfigurationFilterSensitiveLog: (
  obj: ClusterConfiguration
) => any;
export declare const CapacityProviderStrategyItemFilterSensitiveLog: (
  obj: CapacityProviderStrategyItem
) => any;
export declare const ClusterSettingFilterSensitiveLog: (
  obj: ClusterSetting
) => any;
export declare const CreateClusterRequestFilterSensitiveLog: (
  obj: CreateClusterRequest
) => any;
export declare const KeyValuePairFilterSensitiveLog: (obj: KeyValuePair) => any;
export declare const AttachmentFilterSensitiveLog: (obj: Attachment) => any;
export declare const ClusterFilterSensitiveLog: (obj: Cluster) => any;
export declare const CreateClusterResponseFilterSensitiveLog: (
  obj: CreateClusterResponse
) => any;
export declare const DeploymentCircuitBreakerFilterSensitiveLog: (
  obj: DeploymentCircuitBreaker
) => any;
export declare const DeploymentConfigurationFilterSensitiveLog: (
  obj: DeploymentConfiguration
) => any;
export declare const DeploymentControllerFilterSensitiveLog: (
  obj: DeploymentController
) => any;
export declare const LoadBalancerFilterSensitiveLog: (obj: LoadBalancer) => any;
export declare const AwsVpcConfigurationFilterSensitiveLog: (
  obj: AwsVpcConfiguration
) => any;
export declare const NetworkConfigurationFilterSensitiveLog: (
  obj: NetworkConfiguration
) => any;
export declare const PlacementConstraintFilterSensitiveLog: (
  obj: PlacementConstraint
) => any;
export declare const PlacementStrategyFilterSensitiveLog: (
  obj: PlacementStrategy
) => any;
export declare const ServiceRegistryFilterSensitiveLog: (
  obj: ServiceRegistry
) => any;
export declare const CreateServiceRequestFilterSensitiveLog: (
  obj: CreateServiceRequest
) => any;
export declare const DeploymentFilterSensitiveLog: (obj: Deployment) => any;
export declare const ServiceEventFilterSensitiveLog: (obj: ServiceEvent) => any;
export declare const ScaleFilterSensitiveLog: (obj: Scale) => any;
export declare const TaskSetFilterSensitiveLog: (obj: TaskSet) => any;
export declare const ServiceFilterSensitiveLog: (obj: Service) => any;
export declare const CreateServiceResponseFilterSensitiveLog: (
  obj: CreateServiceResponse
) => any;
export declare const CreateTaskSetRequestFilterSensitiveLog: (
  obj: CreateTaskSetRequest
) => any;
export declare const CreateTaskSetResponseFilterSensitiveLog: (
  obj: CreateTaskSetResponse
) => any;
export declare const DeleteAccountSettingRequestFilterSensitiveLog: (
  obj: DeleteAccountSettingRequest
) => any;
export declare const SettingFilterSensitiveLog: (obj: Setting) => any;
export declare const DeleteAccountSettingResponseFilterSensitiveLog: (
  obj: DeleteAccountSettingResponse
) => any;
export declare const AttributeFilterSensitiveLog: (obj: Attribute) => any;
export declare const DeleteAttributesRequestFilterSensitiveLog: (
  obj: DeleteAttributesRequest
) => any;
export declare const DeleteAttributesResponseFilterSensitiveLog: (
  obj: DeleteAttributesResponse
) => any;
export declare const DeleteCapacityProviderRequestFilterSensitiveLog: (
  obj: DeleteCapacityProviderRequest
) => any;
export declare const DeleteCapacityProviderResponseFilterSensitiveLog: (
  obj: DeleteCapacityProviderResponse
) => any;
export declare const DeleteClusterRequestFilterSensitiveLog: (
  obj: DeleteClusterRequest
) => any;
export declare const DeleteClusterResponseFilterSensitiveLog: (
  obj: DeleteClusterResponse
) => any;
export declare const DeleteServiceRequestFilterSensitiveLog: (
  obj: DeleteServiceRequest
) => any;
export declare const DeleteServiceResponseFilterSensitiveLog: (
  obj: DeleteServiceResponse
) => any;
export declare const DeleteTaskSetRequestFilterSensitiveLog: (
  obj: DeleteTaskSetRequest
) => any;
export declare const DeleteTaskSetResponseFilterSensitiveLog: (
  obj: DeleteTaskSetResponse
) => any;
export declare const DeregisterContainerInstanceRequestFilterSensitiveLog: (
  obj: DeregisterContainerInstanceRequest
) => any;
export declare const InstanceHealthCheckResultFilterSensitiveLog: (
  obj: InstanceHealthCheckResult
) => any;
export declare const ContainerInstanceHealthStatusFilterSensitiveLog: (
  obj: ContainerInstanceHealthStatus
) => any;
export declare const ResourceFilterSensitiveLog: (obj: Resource) => any;
export declare const VersionInfoFilterSensitiveLog: (obj: VersionInfo) => any;
export declare const ContainerInstanceFilterSensitiveLog: (
  obj: ContainerInstance
) => any;
export declare const DeregisterContainerInstanceResponseFilterSensitiveLog: (
  obj: DeregisterContainerInstanceResponse
) => any;
export declare const DeregisterTaskDefinitionRequestFilterSensitiveLog: (
  obj: DeregisterTaskDefinitionRequest
) => any;
export declare const ContainerDependencyFilterSensitiveLog: (
  obj: ContainerDependency
) => any;
export declare const EnvironmentFileFilterSensitiveLog: (
  obj: EnvironmentFile
) => any;
export declare const HostEntryFilterSensitiveLog: (obj: HostEntry) => any;
export declare const FirelensConfigurationFilterSensitiveLog: (
  obj: FirelensConfiguration
) => any;
export declare const HealthCheckFilterSensitiveLog: (obj: HealthCheck) => any;
export declare const KernelCapabilitiesFilterSensitiveLog: (
  obj: KernelCapabilities
) => any;
export declare const DeviceFilterSensitiveLog: (obj: Device) => any;
export declare const TmpfsFilterSensitiveLog: (obj: Tmpfs) => any;
export declare const LinuxParametersFilterSensitiveLog: (
  obj: LinuxParameters
) => any;
export declare const SecretFilterSensitiveLog: (obj: Secret) => any;
export declare const LogConfigurationFilterSensitiveLog: (
  obj: LogConfiguration
) => any;
export declare const MountPointFilterSensitiveLog: (obj: MountPoint) => any;
export declare const PortMappingFilterSensitiveLog: (obj: PortMapping) => any;
export declare const RepositoryCredentialsFilterSensitiveLog: (
  obj: RepositoryCredentials
) => any;
export declare const ResourceRequirementFilterSensitiveLog: (
  obj: ResourceRequirement
) => any;
export declare const SystemControlFilterSensitiveLog: (
  obj: SystemControl
) => any;
export declare const UlimitFilterSensitiveLog: (obj: Ulimit) => any;
export declare const VolumeFromFilterSensitiveLog: (obj: VolumeFrom) => any;
export declare const ContainerDefinitionFilterSensitiveLog: (
  obj: ContainerDefinition
) => any;
export declare const EphemeralStorageFilterSensitiveLog: (
  obj: EphemeralStorage
) => any;
export declare const InferenceAcceleratorFilterSensitiveLog: (
  obj: InferenceAccelerator
) => any;
export declare const TaskDefinitionPlacementConstraintFilterSensitiveLog: (
  obj: TaskDefinitionPlacementConstraint
) => any;
export declare const ProxyConfigurationFilterSensitiveLog: (
  obj: ProxyConfiguration
) => any;
export declare const RuntimePlatformFilterSensitiveLog: (
  obj: RuntimePlatform
) => any;
export declare const DockerVolumeConfigurationFilterSensitiveLog: (
  obj: DockerVolumeConfiguration
) => any;
export declare const EFSAuthorizationConfigFilterSensitiveLog: (
  obj: EFSAuthorizationConfig
) => any;
export declare const EFSVolumeConfigurationFilterSensitiveLog: (
  obj: EFSVolumeConfiguration
) => any;
export declare const FSxWindowsFileServerAuthorizationConfigFilterSensitiveLog: (
  obj: FSxWindowsFileServerAuthorizationConfig
) => any;
export declare const FSxWindowsFileServerVolumeConfigurationFilterSensitiveLog: (
  obj: FSxWindowsFileServerVolumeConfiguration
) => any;
export declare const HostVolumePropertiesFilterSensitiveLog: (
  obj: HostVolumeProperties
) => any;
export declare const VolumeFilterSensitiveLog: (obj: Volume) => any;
export declare const TaskDefinitionFilterSensitiveLog: (
  obj: TaskDefinition
) => any;
export declare const DeregisterTaskDefinitionResponseFilterSensitiveLog: (
  obj: DeregisterTaskDefinitionResponse
) => any;
export declare const DescribeCapacityProvidersRequestFilterSensitiveLog: (
  obj: DescribeCapacityProvidersRequest
) => any;
export declare const FailureFilterSensitiveLog: (obj: Failure) => any;
export declare const DescribeCapacityProvidersResponseFilterSensitiveLog: (
  obj: DescribeCapacityProvidersResponse
) => any;
export declare const DescribeClustersRequestFilterSensitiveLog: (
  obj: DescribeClustersRequest
) => any;
export declare const DescribeClustersResponseFilterSensitiveLog: (
  obj: DescribeClustersResponse
) => any;
export declare const DescribeContainerInstancesRequestFilterSensitiveLog: (
  obj: DescribeContainerInstancesRequest
) => any;
export declare const DescribeContainerInstancesResponseFilterSensitiveLog: (
  obj: DescribeContainerInstancesResponse
) => any;
export declare const DescribeServicesRequestFilterSensitiveLog: (
  obj: DescribeServicesRequest
) => any;
export declare const DescribeServicesResponseFilterSensitiveLog: (
  obj: DescribeServicesResponse
) => any;
export declare const DescribeTaskDefinitionRequestFilterSensitiveLog: (
  obj: DescribeTaskDefinitionRequest
) => any;
export declare const DescribeTaskDefinitionResponseFilterSensitiveLog: (
  obj: DescribeTaskDefinitionResponse
) => any;
export declare const DescribeTasksRequestFilterSensitiveLog: (
  obj: DescribeTasksRequest
) => any;
export declare const ManagedAgentFilterSensitiveLog: (obj: ManagedAgent) => any;
export declare const NetworkBindingFilterSensitiveLog: (
  obj: NetworkBinding
) => any;
export declare const NetworkInterfaceFilterSensitiveLog: (
  obj: NetworkInterface
) => any;
export declare const ContainerFilterSensitiveLog: (obj: Container) => any;
export declare const ContainerOverrideFilterSensitiveLog: (
  obj: ContainerOverride
) => any;
export declare const InferenceAcceleratorOverrideFilterSensitiveLog: (
  obj: InferenceAcceleratorOverride
) => any;
export declare const TaskOverrideFilterSensitiveLog: (obj: TaskOverride) => any;
export declare const TaskFilterSensitiveLog: (obj: Task) => any;
export declare const DescribeTasksResponseFilterSensitiveLog: (
  obj: DescribeTasksResponse
) => any;
export declare const DescribeTaskSetsRequestFilterSensitiveLog: (
  obj: DescribeTaskSetsRequest
) => any;
export declare const DescribeTaskSetsResponseFilterSensitiveLog: (
  obj: DescribeTaskSetsResponse
) => any;
export declare const DiscoverPollEndpointRequestFilterSensitiveLog: (
  obj: DiscoverPollEndpointRequest
) => any;
export declare const DiscoverPollEndpointResponseFilterSensitiveLog: (
  obj: DiscoverPollEndpointResponse
) => any;
export declare const ExecuteCommandRequestFilterSensitiveLog: (
  obj: ExecuteCommandRequest
) => any;
export declare const SessionFilterSensitiveLog: (obj: Session) => any;
export declare const ExecuteCommandResponseFilterSensitiveLog: (
  obj: ExecuteCommandResponse
) => any;
export declare const ListAccountSettingsRequestFilterSensitiveLog: (
  obj: ListAccountSettingsRequest
) => any;
export declare const ListAccountSettingsResponseFilterSensitiveLog: (
  obj: ListAccountSettingsResponse
) => any;
export declare const ListAttributesRequestFilterSensitiveLog: (
  obj: ListAttributesRequest
) => any;
export declare const ListAttributesResponseFilterSensitiveLog: (
  obj: ListAttributesResponse
) => any;
export declare const ListClustersRequestFilterSensitiveLog: (
  obj: ListClustersRequest
) => any;
export declare const ListClustersResponseFilterSensitiveLog: (
  obj: ListClustersResponse
) => any;
export declare const ListContainerInstancesRequestFilterSensitiveLog: (
  obj: ListContainerInstancesRequest
) => any;
export declare const ListContainerInstancesResponseFilterSensitiveLog: (
  obj: ListContainerInstancesResponse
) => any;
export declare const ListServicesRequestFilterSensitiveLog: (
  obj: ListServicesRequest
) => any;
export declare const ListServicesResponseFilterSensitiveLog: (
  obj: ListServicesResponse
) => any;
export declare const ListTagsForResourceRequestFilterSensitiveLog: (
  obj: ListTagsForResourceRequest
) => any;
export declare const ListTagsForResourceResponseFilterSensitiveLog: (
  obj: ListTagsForResourceResponse
) => any;
export declare const ListTaskDefinitionFamiliesRequestFilterSensitiveLog: (
  obj: ListTaskDefinitionFamiliesRequest
) => any;
export declare const ListTaskDefinitionFamiliesResponseFilterSensitiveLog: (
  obj: ListTaskDefinitionFamiliesResponse
) => any;
export declare const ListTaskDefinitionsRequestFilterSensitiveLog: (
  obj: ListTaskDefinitionsRequest
) => any;
export declare const ListTaskDefinitionsResponseFilterSensitiveLog: (
  obj: ListTaskDefinitionsResponse
) => any;
export declare const ListTasksRequestFilterSensitiveLog: (
  obj: ListTasksRequest
) => any;
export declare const ListTasksResponseFilterSensitiveLog: (
  obj: ListTasksResponse
) => any;
export declare const PutAccountSettingRequestFilterSensitiveLog: (
  obj: PutAccountSettingRequest
) => any;
export declare const PutAccountSettingResponseFilterSensitiveLog: (
  obj: PutAccountSettingResponse
) => any;
export declare const PutAccountSettingDefaultRequestFilterSensitiveLog: (
  obj: PutAccountSettingDefaultRequest
) => any;
export declare const PutAccountSettingDefaultResponseFilterSensitiveLog: (
  obj: PutAccountSettingDefaultResponse
) => any;
export declare const PutAttributesRequestFilterSensitiveLog: (
  obj: PutAttributesRequest
) => any;
export declare const PutAttributesResponseFilterSensitiveLog: (
  obj: PutAttributesResponse
) => any;
export declare const PutClusterCapacityProvidersRequestFilterSensitiveLog: (
  obj: PutClusterCapacityProvidersRequest
) => any;
export declare const PutClusterCapacityProvidersResponseFilterSensitiveLog: (
  obj: PutClusterCapacityProvidersResponse
) => any;
export declare const PlatformDeviceFilterSensitiveLog: (
  obj: PlatformDevice
) => any;
export declare const RegisterContainerInstanceRequestFilterSensitiveLog: (
  obj: RegisterContainerInstanceRequest
) => any;
export declare const RegisterContainerInstanceResponseFilterSensitiveLog: (
  obj: RegisterContainerInstanceResponse
) => any;
export declare const RegisterTaskDefinitionRequestFilterSensitiveLog: (
  obj: RegisterTaskDefinitionRequest
) => any;
export declare const RegisterTaskDefinitionResponseFilterSensitiveLog: (
  obj: RegisterTaskDefinitionResponse
) => any;
export declare const RunTaskRequestFilterSensitiveLog: (
  obj: RunTaskRequest
) => any;
export declare const RunTaskResponseFilterSensitiveLog: (
  obj: RunTaskResponse
) => any;
export declare const StartTaskRequestFilterSensitiveLog: (
  obj: StartTaskRequest
) => any;
export declare const StartTaskResponseFilterSensitiveLog: (
  obj: StartTaskResponse
) => any;
export declare const StopTaskRequestFilterSensitiveLog: (
  obj: StopTaskRequest
) => any;
export declare const StopTaskResponseFilterSensitiveLog: (
  obj: StopTaskResponse
) => any;
export declare const AttachmentStateChangeFilterSensitiveLog: (
  obj: AttachmentStateChange
) => any;
export declare const SubmitAttachmentStateChangesRequestFilterSensitiveLog: (
  obj: SubmitAttachmentStateChangesRequest
) => any;
export declare const SubmitAttachmentStateChangesResponseFilterSensitiveLog: (
  obj: SubmitAttachmentStateChangesResponse
) => any;
export declare const SubmitContainerStateChangeRequestFilterSensitiveLog: (
  obj: SubmitContainerStateChangeRequest
) => any;
export declare const SubmitContainerStateChangeResponseFilterSensitiveLog: (
  obj: SubmitContainerStateChangeResponse
) => any;
export declare const ContainerStateChangeFilterSensitiveLog: (
  obj: ContainerStateChange
) => any;
export declare const ManagedAgentStateChangeFilterSensitiveLog: (
  obj: ManagedAgentStateChange
) => any;
export declare const SubmitTaskStateChangeRequestFilterSensitiveLog: (
  obj: SubmitTaskStateChangeRequest
) => any;
export declare const SubmitTaskStateChangeResponseFilterSensitiveLog: (
  obj: SubmitTaskStateChangeResponse
) => any;
export declare const TagResourceRequestFilterSensitiveLog: (
  obj: TagResourceRequest
) => any;
export declare const TagResourceResponseFilterSensitiveLog: (
  obj: TagResourceResponse
) => any;
export declare const UntagResourceRequestFilterSensitiveLog: (
  obj: UntagResourceRequest
) => any;
export declare const UntagResourceResponseFilterSensitiveLog: (
  obj: UntagResourceResponse
) => any;
export declare const AutoScalingGroupProviderUpdateFilterSensitiveLog: (
  obj: AutoScalingGroupProviderUpdate
) => any;
export declare const UpdateCapacityProviderRequestFilterSensitiveLog: (
  obj: UpdateCapacityProviderRequest
) => any;
export declare const UpdateCapacityProviderResponseFilterSensitiveLog: (
  obj: UpdateCapacityProviderResponse
) => any;
export declare const UpdateClusterRequestFilterSensitiveLog: (
  obj: UpdateClusterRequest
) => any;
export declare const UpdateClusterResponseFilterSensitiveLog: (
  obj: UpdateClusterResponse
) => any;
export declare const UpdateClusterSettingsRequestFilterSensitiveLog: (
  obj: UpdateClusterSettingsRequest
) => any;
export declare const UpdateClusterSettingsResponseFilterSensitiveLog: (
  obj: UpdateClusterSettingsResponse
) => any;
export declare const UpdateContainerAgentRequestFilterSensitiveLog: (
  obj: UpdateContainerAgentRequest
) => any;
export declare const UpdateContainerAgentResponseFilterSensitiveLog: (
  obj: UpdateContainerAgentResponse
) => any;
export declare const UpdateContainerInstancesStateRequestFilterSensitiveLog: (
  obj: UpdateContainerInstancesStateRequest
) => any;
export declare const UpdateContainerInstancesStateResponseFilterSensitiveLog: (
  obj: UpdateContainerInstancesStateResponse
) => any;
export declare const UpdateServiceRequestFilterSensitiveLog: (
  obj: UpdateServiceRequest
) => any;
export declare const UpdateServiceResponseFilterSensitiveLog: (
  obj: UpdateServiceResponse
) => any;
export declare const UpdateServicePrimaryTaskSetRequestFilterSensitiveLog: (
  obj: UpdateServicePrimaryTaskSetRequest
) => any;
export declare const UpdateServicePrimaryTaskSetResponseFilterSensitiveLog: (
  obj: UpdateServicePrimaryTaskSetResponse
) => any;
export declare const UpdateTaskSetRequestFilterSensitiveLog: (
  obj: UpdateTaskSetRequest
) => any;
export declare const UpdateTaskSetResponseFilterSensitiveLog: (
  obj: UpdateTaskSetResponse
) => any;
